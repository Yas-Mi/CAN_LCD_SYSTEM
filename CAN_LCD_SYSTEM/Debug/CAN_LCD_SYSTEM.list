
CAN_LCD_SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f90  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08006160  08006160  00007160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006294  08006294  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006294  08006294  00007294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800629c  0800629c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800629c  0800629c  0000729c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062a0  080062a0  000072a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080062a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004548  20000010  080062b4  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004558  080062b4  00008558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d83  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369a  00000000  00000000  0001adc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001e460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c99  00000000  00000000  0001f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056c0  00000000  00000000  00020169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a9e  00000000  00000000  00025829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d390f  00000000  00000000  0003a2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010dbd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e4  00000000  00000000  0010dc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00111f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006148 	.word	0x08006148

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08006148 	.word	0x08006148

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <find_str>:
static CONSOLE_CB console_cb;
#define get_myself() (&console_cb)

// 特定の文字位置を取得
uint8_t find_str(char str, char *data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	6039      	str	r1, [r7, #0]
 800051a:	71fb      	strb	r3, [r7, #7]
	char *start_addr, *end_addr;
	uint8_t pos = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	75fb      	strb	r3, [r7, #23]
	
	// 開始アドレスを取得
	start_addr = data;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	613b      	str	r3, [r7, #16]
	
	// 特定の文字の位置を取得
	end_addr = strchr(data, str);
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	4619      	mov	r1, r3
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f005 fdcd 	bl	80060c8 <strchr>
 800052e:	60f8      	str	r0, [r7, #12]
	
	if (end_addr != NULL) {
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d003      	beq.n	800053e <find_str+0x2e>
		pos = (uint8_t)(end_addr - start_addr);
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	75fb      	strb	r3, [r7, #23]
	}
	
	return pos;
 800053e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000548:	b480      	push	{r7}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000558:	e004      	b.n	8000564 <ts_itoa+0x1c>
		div *= base;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	fb02 f303 	mul.w	r3, r2, r3
 8000562:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	fbb2 f2f3 	udiv	r2, r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	429a      	cmp	r2, r3
 8000570:	d2f3      	bcs.n	800055a <ts_itoa+0x12>

	while (div != 0)
 8000572:	e029      	b.n	80005c8 <ts_itoa+0x80>
	{
		int num = d/div;
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	fbb2 f3f3 	udiv	r3, r2, r3
 800057c:	613b      	str	r3, [r7, #16]
		d = d%div;
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	fbb3 f1f2 	udiv	r1, r3, r2
 8000586:	fb01 f202 	mul.w	r2, r1, r2
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	60bb      	str	r3, [r7, #8]
		div /= base;
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	fb92 f3f3 	sdiv	r3, r2, r3
 8000596:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	2b09      	cmp	r3, #9
 800059c:	dd0a      	ble.n	80005b4 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	1c58      	adds	r0, r3, #1
 80005a8:	68f9      	ldr	r1, [r7, #12]
 80005aa:	6008      	str	r0, [r1, #0]
 80005ac:	3237      	adds	r2, #55	@ 0x37
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	701a      	strb	r2, [r3, #0]
 80005b2:	e009      	b.n	80005c8 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	1c58      	adds	r0, r3, #1
 80005be:	68f9      	ldr	r1, [r7, #12]
 80005c0:	6008      	str	r0, [r1, #0]
 80005c2:	3230      	adds	r2, #48	@ 0x30
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1d2      	bne.n	8000574 <ts_itoa+0x2c>
	}
}
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	371c      	adds	r7, #28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
static int ts_formatlength(const char *fmt, va_list va)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	int length = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80005ea:	e080      	b.n	80006ee <ts_formatlength+0x112>
	{
		if (*fmt == '%')
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b25      	cmp	r3, #37	@ 0x25
 80005f2:	d176      	bne.n	80006e2 <ts_formatlength+0x106>
		{
			++fmt;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	3b58      	subs	r3, #88	@ 0x58
 8000600:	2b20      	cmp	r3, #32
 8000602:	d86a      	bhi.n	80006da <ts_formatlength+0xfe>
 8000604:	a201      	add	r2, pc, #4	@ (adr r2, 800060c <ts_formatlength+0x30>)
 8000606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060a:	bf00      	nop
 800060c:	080006cd 	.word	0x080006cd
 8000610:	080006db 	.word	0x080006db
 8000614:	080006db 	.word	0x080006db
 8000618:	080006db 	.word	0x080006db
 800061c:	080006db 	.word	0x080006db
 8000620:	080006db 	.word	0x080006db
 8000624:	080006db 	.word	0x080006db
 8000628:	080006db 	.word	0x080006db
 800062c:	080006db 	.word	0x080006db
 8000630:	080006db 	.word	0x080006db
 8000634:	080006db 	.word	0x080006db
 8000638:	08000691 	.word	0x08000691
 800063c:	0800069f 	.word	0x0800069f
 8000640:	080006db 	.word	0x080006db
 8000644:	080006db 	.word	0x080006db
 8000648:	080006db 	.word	0x080006db
 800064c:	080006db 	.word	0x080006db
 8000650:	0800069f 	.word	0x0800069f
 8000654:	080006db 	.word	0x080006db
 8000658:	080006db 	.word	0x080006db
 800065c:	080006db 	.word	0x080006db
 8000660:	080006db 	.word	0x080006db
 8000664:	080006db 	.word	0x080006db
 8000668:	080006db 	.word	0x080006db
 800066c:	080006db 	.word	0x080006db
 8000670:	080006db 	.word	0x080006db
 8000674:	080006db 	.word	0x080006db
 8000678:	080006ad 	.word	0x080006ad
 800067c:	080006db 	.word	0x080006db
 8000680:	0800069f 	.word	0x0800069f
 8000684:	080006db 	.word	0x080006db
 8000688:	080006db 	.word	0x080006db
 800068c:	080006cd 	.word	0x080006cd
			{
			  case 'c':
		  		  va_arg(va, int);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	3304      	adds	r3, #4
 8000694:	603b      	str	r3, [r7, #0]
				  ++length;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
				  break;
 800069c:	e024      	b.n	80006e8 <ts_formatlength+0x10c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	330b      	adds	r3, #11
 80006a2:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	3304      	adds	r3, #4
 80006a8:	603b      	str	r3, [r7, #0]
				  break;
 80006aa:	e01d      	b.n	80006e8 <ts_formatlength+0x10c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	1d1a      	adds	r2, r3, #4
 80006b0:	603a      	str	r2, [r7, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80006b6:	e002      	b.n	80006be <ts_formatlength+0xe2>
			  			  ++length;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	60ba      	str	r2, [r7, #8]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f6      	bne.n	80006b8 <ts_formatlength+0xdc>
			  	  }
				  break;
 80006ca:	e00d      	b.n	80006e8 <ts_formatlength+0x10c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3308      	adds	r3, #8
 80006d0:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	3304      	adds	r3, #4
 80006d6:	603b      	str	r3, [r7, #0]
				  break;
 80006d8:	e006      	b.n	80006e8 <ts_formatlength+0x10c>
			  default:
				  ++length;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
				  break;
 80006e0:	e002      	b.n	80006e8 <ts_formatlength+0x10c>
			}
		}
		else
		{
			++length;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3301      	adds	r3, #1
 80006ec:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f47f af7a 	bne.w	80005ec <ts_formatlength+0x10>
	}
	return length;
 80006f8:	68fb      	ldr	r3, [r7, #12]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000718:	e0bc      	b.n	8000894 <ts_formatstring+0x18c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b25      	cmp	r3, #37	@ 0x25
 8000720:	f040 80b0 	bne.w	8000884 <ts_formatstring+0x17c>
		{
			switch (*(++fmt))
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	3301      	adds	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b25      	cmp	r3, #37	@ 0x25
 8000730:	f000 809e 	beq.w	8000870 <ts_formatstring+0x168>
 8000734:	2b25      	cmp	r3, #37	@ 0x25
 8000736:	f2c0 80a1 	blt.w	800087c <ts_formatstring+0x174>
 800073a:	2b78      	cmp	r3, #120	@ 0x78
 800073c:	f300 809e 	bgt.w	800087c <ts_formatstring+0x174>
 8000740:	2b58      	cmp	r3, #88	@ 0x58
 8000742:	f2c0 809b 	blt.w	800087c <ts_formatstring+0x174>
 8000746:	3b58      	subs	r3, #88	@ 0x58
 8000748:	2b20      	cmp	r3, #32
 800074a:	f200 8097 	bhi.w	800087c <ts_formatstring+0x174>
 800074e:	a201      	add	r2, pc, #4	@ (adr r2, 8000754 <ts_formatstring+0x4c>)
 8000750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000754:	08000859 	.word	0x08000859
 8000758:	0800087d 	.word	0x0800087d
 800075c:	0800087d 	.word	0x0800087d
 8000760:	0800087d 	.word	0x0800087d
 8000764:	0800087d 	.word	0x0800087d
 8000768:	0800087d 	.word	0x0800087d
 800076c:	0800087d 	.word	0x0800087d
 8000770:	0800087d 	.word	0x0800087d
 8000774:	0800087d 	.word	0x0800087d
 8000778:	0800087d 	.word	0x0800087d
 800077c:	0800087d 	.word	0x0800087d
 8000780:	080007d9 	.word	0x080007d9
 8000784:	080007ed 	.word	0x080007ed
 8000788:	0800087d 	.word	0x0800087d
 800078c:	0800087d 	.word	0x0800087d
 8000790:	0800087d 	.word	0x0800087d
 8000794:	0800087d 	.word	0x0800087d
 8000798:	080007ed 	.word	0x080007ed
 800079c:	0800087d 	.word	0x0800087d
 80007a0:	0800087d 	.word	0x0800087d
 80007a4:	0800087d 	.word	0x0800087d
 80007a8:	0800087d 	.word	0x0800087d
 80007ac:	0800087d 	.word	0x0800087d
 80007b0:	0800087d 	.word	0x0800087d
 80007b4:	0800087d 	.word	0x0800087d
 80007b8:	0800087d 	.word	0x0800087d
 80007bc:	0800087d 	.word	0x0800087d
 80007c0:	0800081d 	.word	0x0800081d
 80007c4:	0800087d 	.word	0x0800087d
 80007c8:	08000843 	.word	0x08000843
 80007cc:	0800087d 	.word	0x0800087d
 80007d0:	0800087d 	.word	0x0800087d
 80007d4:	08000859 	.word	0x08000859
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1d1a      	adds	r2, r3, #4
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	6819      	ldr	r1, [r3, #0]
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60fa      	str	r2, [r7, #12]
 80007e6:	b2ca      	uxtb	r2, r1
 80007e8:	701a      	strb	r2, [r3, #0]
				break;
 80007ea:	e047      	b.n	800087c <ts_formatstring+0x174>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	1d1a      	adds	r2, r3, #4
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	da07      	bge.n	800080c <ts_formatstring+0x104>
					{
						val *= -1;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	425b      	negs	r3, r3
 8000800:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	60fa      	str	r2, [r7, #12]
 8000808:	222d      	movs	r2, #45	@ 0x2d
 800080a:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800080c:	69f9      	ldr	r1, [r7, #28]
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	220a      	movs	r2, #10
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fe97 	bl	8000548 <ts_itoa>
				}
				break;
 800081a:	e02f      	b.n	800087c <ts_formatstring+0x174>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	1d1a      	adds	r2, r3, #4
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000826:	e007      	b.n	8000838 <ts_formatstring+0x130>
					{
						*buf++ = *arg++;
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	1c53      	adds	r3, r2, #1
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	60f9      	str	r1, [r7, #12]
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f3      	bne.n	8000828 <ts_formatstring+0x120>
					}
				}
				break;
 8000840:	e01c      	b.n	800087c <ts_formatstring+0x174>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	1d1a      	adds	r2, r3, #4
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	6819      	ldr	r1, [r3, #0]
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	220a      	movs	r2, #10
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fe79 	bl	8000548 <ts_itoa>
				break;
 8000856:	e011      	b.n	800087c <ts_formatstring+0x174>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1d1a      	adds	r2, r3, #4
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2210      	movs	r2, #16
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe6d 	bl	8000548 <ts_itoa>
				break;
 800086e:	e005      	b.n	800087c <ts_formatstring+0x174>
			  case '%':
				  *buf++ = '%';
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60fa      	str	r2, [r7, #12]
 8000876:	2225      	movs	r2, #37	@ 0x25
 8000878:	701a      	strb	r2, [r3, #0]
				  break;
 800087a:	bf00      	nop
			}
			fmt++;
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	3301      	adds	r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	e007      	b.n	8000894 <ts_formatstring+0x18c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000884:	68ba      	ldr	r2, [r7, #8]
 8000886:	1c53      	adds	r3, r2, #1
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	60f9      	str	r1, [r7, #12]
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	f47f af3e 	bne.w	800071a <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	1ad3      	subs	r3, r2, r3
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop

080008b4 <console_recv>:

// コンソールからの入力を受信する関数
static uint8_t console_recv(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
	uint8_t data;
	int32_t size;
	
	while(1) {
		// 受信できるで待つ
		size = usart_drv_recv(USART_DRV_DEV_CONSOLE, &data, 1, 1000);
 80008ba:	1cf9      	adds	r1, r7, #3
 80008bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c0:	2201      	movs	r2, #1
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 faf2 	bl	8000eac <usart_drv_recv>
 80008c8:	6078      	str	r0, [r7, #4]
		// 期待したサイズ読めた？
		if (size == 1) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d000      	beq.n	80008d2 <console_recv+0x1e>
		size = usart_drv_recv(USART_DRV_DEV_CONSOLE, &data, 1, 1000);
 80008d0:	e7f3      	b.n	80008ba <console_recv+0x6>
			break;
 80008d2:	bf00      	nop
		}
	}
	
	return data;
 80008d4:	78fb      	ldrb	r3, [r7, #3]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <console_analysis>:

// コンソールからの入力を受信する関数
static void console_analysis(uint8_t data)
{
 80008e0:	b5b0      	push	{r4, r5, r7, lr}
 80008e2:	b090      	sub	sp, #64	@ 0x40
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	CONSOLE_CB *this = get_myself();
 80008ea:	4b6c      	ldr	r3, [pc, #432]	@ (8000a9c <console_analysis+0x1bc>)
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
	COMMAND_INFO *cmd_info;
	uint8_t i, j;
	uint8_t argc = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	char *argv[CONSOLE_ARG_MAX];
	uint8_t base_pos = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t sp_pos = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	
	switch (data) {
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b0a      	cmp	r3, #10
 8000904:	d02e      	beq.n	8000964 <console_analysis+0x84>
 8000906:	2b0a      	cmp	r3, #10
 8000908:	f300 80b5 	bgt.w	8000a76 <console_analysis+0x196>
 800090c:	2b08      	cmp	r3, #8
 800090e:	f000 80c0 	beq.w	8000a92 <console_analysis+0x1b2>
 8000912:	2b09      	cmp	r3, #9
 8000914:	f040 80af 	bne.w	8000a76 <console_analysis+0x196>
		case '\t':	// tab
			// コマンドの一覧を表示
			console_printf("\n");
 8000918:	4861      	ldr	r0, [pc, #388]	@ (8000aa0 <console_analysis+0x1c0>)
 800091a:	f000 f979 	bl	8000c10 <console_printf>
			for (i = 0; i < this->cmd_idx; i++) {
 800091e:	2300      	movs	r3, #0
 8000920:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000924:	e013      	b.n	800094e <console_analysis+0x6e>
				cmd_info = &(this->cmd_info[i]);
 8000926:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800092a:	330a      	adds	r3, #10
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000930:	4413      	add	r3, r2
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
				console_printf(cmd_info->input);
 8000934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f969 	bl	8000c10 <console_printf>
				console_printf("\n");
 800093e:	4858      	ldr	r0, [pc, #352]	@ (8000aa0 <console_analysis+0x1c0>)
 8000940:	f000 f966 	bl	8000c10 <console_printf>
			for (i = 0; i < this->cmd_idx; i++) {
 8000944:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000948:	3301      	adds	r3, #1
 800094a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800094e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000950:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8000954:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000958:	429a      	cmp	r2, r3
 800095a:	d3e4      	bcc.n	8000926 <console_analysis+0x46>
			}
			console_printf("\n");
 800095c:	4850      	ldr	r0, [pc, #320]	@ (8000aa0 <console_analysis+0x1c0>)
 800095e:	f000 f957 	bl	8000c10 <console_printf>
			break;
 8000962:	e097      	b.n	8000a94 <console_analysis+0x1b4>
		case '\b':	// back space
			break;
		case '\n':	// Enter
			// NULL文字を設定
			this->buf[this->buf_idx++] = '\0';
 8000964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000966:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	b2d1      	uxtb	r1, r2
 800096e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000970:	f882 104c 	strb.w	r1, [r2, #76]	@ 0x4c
 8000974:	461a      	mov	r2, r3
 8000976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000978:	4413      	add	r3, r2
 800097a:	2200      	movs	r2, #0
 800097c:	731a      	strb	r2, [r3, #12]
			// コマンドに設定されている？
			for (i = 0; i < this->cmd_idx; i++) {
 800097e:	2300      	movs	r3, #0
 8000980:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000984:	e06b      	b.n	8000a5e <console_analysis+0x17e>
				cmd_info = &(this->cmd_info[i]);
 8000986:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800098a:	330a      	adds	r3, #10
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000990:	4413      	add	r3, r2
 8000992:	633b      	str	r3, [r7, #48]	@ 0x30
				// コマンド名が一致した
				if (memcmp(this->buf, cmd_info->input, strlen(cmd_info->input)) == 0) {
 8000994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000996:	f103 040c 	add.w	r4, r3, #12
 800099a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099c:	681d      	ldr	r5, [r3, #0]
 800099e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fc34 	bl	8000210 <strlen>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4629      	mov	r1, r5
 80009ae:	4620      	mov	r0, r4
 80009b0:	f005 fb72 	bl	8006098 <memcmp>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d14c      	bne.n	8000a54 <console_analysis+0x174>
					// 引数解析 (*) 先頭に空白は絶対に入れないこと！！
					for (j = 0; j < CONSOLE_ARG_MAX; j++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80009c0:	e039      	b.n	8000a36 <console_analysis+0x156>
						// 空白を検索
						sp_pos = find_str(' ', &(this->buf[base_pos]));
 80009c2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80009c6:	3308      	adds	r3, #8
 80009c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80009ca:	4413      	add	r3, r2
 80009cc:	3304      	adds	r3, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	2020      	movs	r0, #32
 80009d2:	f7ff fd9d 	bl	8000510 <find_str>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						// 引数設定
						argv[argc++] = &(this->buf[base_pos]);
 80009dc:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80009e0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80009e4:	1c59      	adds	r1, r3, #1
 80009e6:	f887 103d 	strb.w	r1, [r7, #61]	@ 0x3d
 80009ea:	4619      	mov	r1, r3
 80009ec:	f102 0308 	add.w	r3, r2, #8
 80009f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80009f2:	4413      	add	r3, r2
 80009f4:	1d1a      	adds	r2, r3, #4
 80009f6:	008b      	lsls	r3, r1, #2
 80009f8:	3340      	adds	r3, #64	@ 0x40
 80009fa:	443b      	add	r3, r7
 80009fc:	f843 2c38 	str.w	r2, [r3, #-56]
						// 空白がなかった
						if (sp_pos == 0) {
 8000a00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d01b      	beq.n	8000a40 <console_analysis+0x160>
							break;
						}
						// 空白をNULL文字に設定
						this->buf[base_pos+sp_pos] = '\0';
 8000a08:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8000a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a10:	4413      	add	r3, r2
 8000a12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a14:	4413      	add	r3, r2
 8000a16:	2200      	movs	r2, #0
 8000a18:	731a      	strb	r2, [r3, #12]
						// 検索開始位置を更新 
						base_pos += sp_pos + 1;
 8000a1a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000a1e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000a22:	4413      	add	r3, r2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	3301      	adds	r3, #1
 8000a28:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
					for (j = 0; j < CONSOLE_ARG_MAX; j++) {
 8000a2c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000a30:	3301      	adds	r3, #1
 8000a32:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8000a36:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000a3a:	2b09      	cmp	r3, #9
 8000a3c:	d9c1      	bls.n	80009c2 <console_analysis+0xe2>
 8000a3e:	e000      	b.n	8000a42 <console_analysis+0x162>
							break;
 8000a40:	bf00      	nop
					}
					// コマンド実行
					cmd_info->func(argc, argv);
 8000a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8000a4a:	f107 0108 	add.w	r1, r7, #8
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4798      	blx	r3
					break;
 8000a52:	e00b      	b.n	8000a6c <console_analysis+0x18c>
			for (i = 0; i < this->cmd_idx; i++) {
 8000a54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a60:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8000a64:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d38c      	bcc.n	8000986 <console_analysis+0xa6>
				}
			}
			// その他あればここで処理する
			// コマンドラインバッファインデックスをクリア
			this->buf_idx = 0;
 8000a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			break;
 8000a74:	e00e      	b.n	8000a94 <console_analysis+0x1b4>
		default:
			// データをバッファを格納
			this->buf[this->buf_idx++] = data;
 8000a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a78:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	b2d1      	uxtb	r1, r2
 8000a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a82:	f882 104c 	strb.w	r1, [r2, #76]	@ 0x4c
 8000a86:	461a      	mov	r2, r3
 8000a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a8a:	4413      	add	r3, r2
 8000a8c:	79fa      	ldrb	r2, [r7, #7]
 8000a8e:	731a      	strb	r2, [r3, #12]
			break;
 8000a90:	e000      	b.n	8000a94 <console_analysis+0x1b4>
			break;
 8000a92:	bf00      	nop
	}
	
	return;
 8000a94:	bf00      	nop
}
 8000a96:	3740      	adds	r7, #64	@ 0x40
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a9c:	2000002c 	.word	0x2000002c
 8000aa0:	08006160 	.word	0x08006160

08000aa4 <StartConsoleSend>:

// コンソール送信タスク
void StartConsoleSend(void const * argument)
{
 8000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa6:	b099      	sub	sp, #100	@ 0x64
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	CONSOLE_CB *this =  get_myself();
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <StartConsoleSend+0x70>)
 8000aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int8_t print_buf[CONSOLE_SEND_MAX];
	uint32_t size;
	
	while (1) {
		// 送信データ待ち
		evt = osMailGet(this->ConsoleSendMailHandle, 10);
 8000ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ab2:	6899      	ldr	r1, [r3, #8]
 8000ab4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ab8:	220a      	movs	r2, #10
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 ffb4 	bl	8003a28 <osMailGet>
		// イベントがないなら次の送信データを待つ
		if (evt.status == osEventMail) {
 8000ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ac2:	2b20      	cmp	r3, #32
 8000ac4:	d1f4      	bne.n	8000ab0 <StartConsoleSend+0xc>
			// 早く開放したいからローカル変数にコピー
			memcpy(print_buf, evt.value.p, CONSOLE_SEND_MAX);
 8000ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ac8:	461c      	mov	r4, r3
 8000aca:	f107 0608 	add.w	r6, r7, #8
 8000ace:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8000ad2:	4635      	mov	r5, r6
 8000ad4:	4623      	mov	r3, r4
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	6859      	ldr	r1, [r3, #4]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ae0:	3410      	adds	r4, #16
 8000ae2:	3610      	adds	r6, #16
 8000ae4:	4564      	cmp	r4, ip
 8000ae6:	d1f4      	bne.n	8000ad2 <StartConsoleSend+0x2e>
			// 解放
			osMailFree(this->ConsoleSendMailHandle, evt.value.p);
 8000ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 f80d 	bl	8003b10 <osMailFree>
			// サイズ取得
			size = strlen(print_buf);
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fb88 	bl	8000210 <strlen>
 8000b00:	65b8      	str	r0, [r7, #88]	@ 0x58
			// コンソール出力
			ercd = usart_drv_send(USART_DRV_DEV_CONSOLE, (uint8_t*)print_buf, size, 10);
 8000b02:	f107 0108 	add.w	r1, r7, #8
 8000b06:	230a      	movs	r3, #10
 8000b08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 f95e 	bl	8000dcc <usart_drv_send>
 8000b10:	6578      	str	r0, [r7, #84]	@ 0x54
		evt = osMailGet(this->ConsoleSendMailHandle, 10);
 8000b12:	e7cd      	b.n	8000ab0 <StartConsoleSend+0xc>
 8000b14:	2000002c 	.word	0x2000002c

08000b18 <StartConsoleRecv>:
	}
}

// コンソール受信タスク
void StartConsoleRecv(void const * argument)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	CONSOLE_CB *this =  get_myself();
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <StartConsoleRecv+0x48>)
 8000b22:	60fb      	str	r3, [r7, #12]
	uint8_t data[2];
	
	while (1) {
		// "command>"を出力
		if (this->buf_idx == 0) {
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <StartConsoleRecv+0x1c>
			console_printf("command>");
 8000b2e:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <StartConsoleRecv+0x4c>)
 8000b30:	f000 f86e 	bl	8000c10 <console_printf>
		}
		// コンソールからの入力を受信する
		data[0] = console_recv();
 8000b34:	f7ff febe 	bl	80008b4 <console_recv>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	723b      	strb	r3, [r7, #8]
		data[1] = '\0';
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	727b      	strb	r3, [r7, #9]
		// 改行コード変換(\r→\n)
		if (data[0] == '\r') data[0] = '\n';
 8000b40:	7a3b      	ldrb	r3, [r7, #8]
 8000b42:	2b0d      	cmp	r3, #13
 8000b44:	d101      	bne.n	8000b4a <StartConsoleRecv+0x32>
 8000b46:	230a      	movs	r3, #10
 8000b48:	723b      	strb	r3, [r7, #8]
		// エコーバック
		console_printf("%c", data[0]);
 8000b4a:	7a3b      	ldrb	r3, [r7, #8]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	@ (8000b68 <StartConsoleRecv+0x50>)
 8000b50:	f000 f85e 	bl	8000c10 <console_printf>
		// 受信データ解析
		console_analysis(data[0]);
 8000b54:	7a3b      	ldrb	r3, [r7, #8]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fec2 	bl	80008e0 <console_analysis>
		if (this->buf_idx == 0) {
 8000b5c:	e7e2      	b.n	8000b24 <StartConsoleRecv+0xc>
 8000b5e:	bf00      	nop
 8000b60:	2000002c 	.word	0x2000002c
 8000b64:	08006164 	.word	0x08006164
 8000b68:	08006170 	.word	0x08006170

08000b6c <console_init>:
	}
}

// 初期化
osStatus console_init(void)
{
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b094      	sub	sp, #80	@ 0x50
 8000b70:	af00      	add	r7, sp, #0
	CONSOLE_CB *this =  get_myself();
 8000b72:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <console_init+0x98>)
 8000b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t ercd;
	
	// 初期化
	memset(this, 0x00, sizeof(CONSOLE_CB));
 8000b76:	22a4      	movs	r2, #164	@ 0xa4
 8000b78:	2100      	movs	r1, #0
 8000b7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000b7c:	f005 fa9c 	bl	80060b8 <memset>
	
	// オープン
	if ((ercd = usart_drv_open(USART_DRV_DEV_CONSOLE)) != osOK) {
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f8df 	bl	8000d44 <usart_drv_open>
 8000b86:	64b8      	str	r0, [r7, #72]	@ 0x48
 8000b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d134      	bne.n	8000bf8 <console_init+0x8c>
		goto EXIT;
	}
	
	// メールキュー作成
	osMailQDef(ConsoleSendBuf, 32, CONSOLE_SEND_MAX);
 8000b8e:	2320      	movs	r3, #32
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b92:	2304      	movs	r3, #4
 8000b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b96:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b9a:	643b      	str	r3, [r7, #64]	@ 0x40
	this->ConsoleSendMailHandle = osMailCreate(osMailQ(ConsoleSendBuf), NULL);
 8000b9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 fe94 	bl	80038d0 <osMailCreate>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bac:	609a      	str	r2, [r3, #8]
	
	osThreadDef(ConsoleSend, StartConsoleSend, osPriorityNormal, 0, 512);
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <console_init+0x9c>)
 8000bb0:	f107 041c 	add.w	r4, r7, #28
 8000bb4:	461d      	mov	r5, r3
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	this->ConsoleSendTaskHandle = osThreadCreate(osThread(ConsoleSend), NULL);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f002 fc8e 	bl	80034ea <osThreadCreate>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bd2:	601a      	str	r2, [r3, #0]
	
	osThreadDef(ConsoleRecv, StartConsoleRecv, osPriorityLow, 0, 512);
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <console_init+0xa0>)
 8000bd6:	463c      	mov	r4, r7
 8000bd8:	461d      	mov	r5, r3
 8000bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	this->ConsoleRecvTaskHandle = osThreadCreate(osThread(ConsoleRecv), NULL);
 8000be6:	463b      	mov	r3, r7
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 fc7d 	bl	80034ea <osThreadCreate>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	e000      	b.n	8000bfa <console_init+0x8e>
		goto EXIT;
 8000bf8:	bf00      	nop
	
EXIT:
	return ercd;
 8000bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3750      	adds	r7, #80	@ 0x50
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}
 8000c04:	2000002c 	.word	0x2000002c
 8000c08:	08006180 	.word	0x08006180
 8000c0c:	080061a8 	.word	0x080061a8

08000c10 <console_printf>:

void console_printf(const char *fmt, ...)
{
 8000c10:	b40f      	push	{r0, r1, r2, r3}
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
	CONSOLE_CB *this = get_myself();
 8000c18:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <console_printf+0x70>)
 8000c1a:	60fb      	str	r3, [r7, #12]
	int32_t length = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
	va_list va;
	char *output;
	
	va_start(va, fmt);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	69b8      	ldr	r0, [r7, #24]
 8000c2a:	f7ff fcd7 	bl	80005dc <ts_formatlength>
 8000c2e:	60b8      	str	r0, [r7, #8]
	va_end(va);
	
	// 最大数を超えている場合は終了
	if (length > CONSOLE_SEND_MAX) {
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b40      	cmp	r3, #64	@ 0x40
 8000c34:	dc1c      	bgt.n	8000c70 <console_printf+0x60>
		return;
	}
	
	// メモリ確保
	output = osMailAlloc(this->ConsoleSendMailHandle, osWaitForever);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fe9e 	bl	8003980 <osMailAlloc>
 8000c44:	6078      	str	r0, [r7, #4]
	
	// 初期化
	memset(output, 0x00, CONSOLE_SEND_MAX);
 8000c46:	2240      	movs	r2, #64	@ 0x40
 8000c48:	2100      	movs	r1, #0
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f005 fa34 	bl	80060b8 <memset>
	
	va_start(va, fmt);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	603b      	str	r3, [r7, #0]
	length = ts_formatstring(output, fmt, va);
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	69b9      	ldr	r1, [r7, #24]
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff fd54 	bl	8000708 <ts_formatstring>
 8000c60:	60b8      	str	r0, [r7, #8]
	// コンソール送信タスクへ送信
	osMailPut(this->ConsoleSendMailHandle, output);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 fe9f 	bl	80039ac <osMailPut>
 8000c6e:	e000      	b.n	8000c72 <console_printf+0x62>
		return;
 8000c70:	bf00      	nop
	va_end(va);
	
}
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c7a:	b004      	add	sp, #16
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	2000002c 	.word	0x2000002c

08000c84 <usart_recv_callback>:
	{USART_CH_4, {USART_LEN_8, USART_STOPBIT_1, USART_PARITY_DISABLE, 115200}},
};

// 受信コールバック
void usart_recv_callback(USART_CH ch, void* p_ctx)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
	USART_DRV_CB *this = (USART_DRV_CB*)p_ctx;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	60fb      	str	r3, [r7, #12]
	
	if (this->rcv_thread_id != NULL) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d005      	beq.n	8000ca8 <usart_recv_callback+0x24>
		// イベント送信
		osSignalSet(this->rcv_thread_id, UART_DRV_RECV_DONE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fc88 	bl	80035b8 <osSignalSet>
	}
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <usart_send_callback>:

// 送信コールバック
void usart_send_callback(USART_CH ch, void* p_ctx)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
	USART_DRV_CB *this = (USART_DRV_CB*)p_ctx;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]
	
	if (this->snd_thread_id != NULL) {
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <usart_send_callback+0x24>
		// イベント送信
		osSignalSet(this->snd_thread_id, UART_DRV_SEND_DONE);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fc72 	bl	80035b8 <osSignalSet>
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <usart_err_callback>:

// エラーコールバック
void usart_err_callback(USART_CH ch, void* p_ctx)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
	USART_DRV_CB *this = (USART_DRV_CB*)p_ctx;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	60fb      	str	r3, [r7, #12]
	
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <usart_drv_init>:

// 初期化
osStatus usart_drv_init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	USART_DRV_CB *this;
	USART_DRV_DEV dev;
	
	// 初期化
	for (dev = 0; dev < USART_DRV_DEV_MAX; dev++) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	e012      	b.n	8000d2a <usart_drv_init+0x32>
		// 制御ブロックを取得
		this = get_myself(dev);
 8000d04:	79fa      	ldrb	r2, [r7, #7]
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d40 <usart_drv_init+0x48>)
 8000d10:	4413      	add	r3, r2
 8000d12:	603b      	str	r3, [r7, #0]
		// 初期化
		memset(this, 0, sizeof(USART_DRV_CB));
 8000d14:	220c      	movs	r2, #12
 8000d16:	2100      	movs	r1, #0
 8000d18:	6838      	ldr	r0, [r7, #0]
 8000d1a:	f005 f9cd 	bl	80060b8 <memset>
		// 状態をクローズ状態に更新
		this->status = ST_CLOSE;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
	for (dev = 0; dev < USART_DRV_DEV_MAX; dev++) {
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	3301      	adds	r3, #1
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0e9      	beq.n	8000d04 <usart_drv_init+0xc>
	}
	
	return usart_init();
 8000d30:	f000 fd00 	bl	8001734 <usart_init>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000d0 	.word	0x200000d0

08000d44 <usart_drv_open>:

// オープン
osStatus usart_drv_open(USART_DRV_DEV dev)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	USART_DRV_CB *this;
	const USART_DEV_INFO *p_info;
	uint32_t ercd;
	
	// パラメータチェック
	if (dev >= USART_DRV_DEV_MAX) {
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <usart_drv_open+0x14>
		return osErrorParameter;
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	e02b      	b.n	8000db0 <usart_drv_open+0x6c>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 8000d58:	79fa      	ldrb	r2, [r7, #7]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4a15      	ldr	r2, [pc, #84]	@ (8000db8 <usart_drv_open+0x74>)
 8000d64:	4413      	add	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
	
	// クローズ状態でなければ終了
	if (this->status != ST_CLOSE) {
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d001      	beq.n	8000d74 <usart_drv_open+0x30>
		return osErrorParameter;
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	e01d      	b.n	8000db0 <usart_drv_open+0x6c>
	}
	
	// USART情報取得
	p_info = &usart_info_tbl[dev];
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <usart_drv_open+0x78>)
 8000d80:	4413      	add	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
	
	// オープン
	if ((ercd = usart_open(p_info->ch, &(p_info->open_par), usart_send_callback, usart_recv_callback, usart_err_callback, this)) != osOK) {
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	7818      	ldrb	r0, [r3, #0]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1d19      	adds	r1, r3, #4
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <usart_drv_open+0x7c>)
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <usart_drv_open+0x80>)
 8000d96:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <usart_drv_open+0x84>)
 8000d98:	f000 fcf0 	bl	800177c <usart_open>
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d103      	bne.n	8000dac <usart_drv_open+0x68>
		goto EXIT;
	}
	
	// 状態を更新
	this->status = ST_OPEN;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	2202      	movs	r2, #2
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e000      	b.n	8000dae <usart_drv_open+0x6a>
		goto EXIT;
 8000dac:	bf00      	nop
	
EXIT:
	return ercd;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200000d0 	.word	0x200000d0
 8000dbc:	0800623c 	.word	0x0800623c
 8000dc0:	08000cdd 	.word	0x08000cdd
 8000dc4:	08000c85 	.word	0x08000c85
 8000dc8:	08000cb1 	.word	0x08000cb1

08000dcc <usart_drv_send>:

// 送信
int32_t usart_drv_send(USART_DRV_DEV dev, uint8_t *p_data, uint32_t size, int32_t tmout)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	@ 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	61b9      	str	r1, [r7, #24]
 8000dd4:	617a      	str	r2, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	4603      	mov	r3, r0
 8000dda:	77fb      	strb	r3, [r7, #31]
	USART_DRV_CB *this;
	const USART_DEV_INFO *p_info;
	uint32_t ercd;
	uint32_t cnt = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
	
	// パラメータチェック
	if (dev >= USART_DRV_DEV_MAX) {
 8000de0:	7ffb      	ldrb	r3, [r7, #31]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <usart_drv_send+0x20>
		return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e057      	b.n	8000e9c <usart_drv_send+0xd0>
	}
	if (p_data == NULL) {
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <usart_drv_send+0x2c>
		return -1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e051      	b.n	8000e9c <usart_drv_send+0xd0>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 8000df8:	7ffa      	ldrb	r2, [r7, #31]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4a28      	ldr	r2, [pc, #160]	@ (8000ea4 <usart_drv_send+0xd8>)
 8000e04:	4413      	add	r3, r2
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
	
	// クローズ状態でなければ終了
	if (this->status != ST_OPEN) {
 8000e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d002      	beq.n	8000e16 <usart_drv_send+0x4a>
		return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
 8000e14:	e042      	b.n	8000e9c <usart_drv_send+0xd0>
	}
	
	// タスク情報を取得
	this->snd_thread_id = osThreadGetId();
 8000e16:	f002 fbb4 	bl	8003582 <osThreadGetId>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1e:	605a      	str	r2, [r3, #4]
	
	// USART情報取得
	p_info = &usart_info_tbl[dev];
 8000e20:	7ffa      	ldrb	r2, [r7, #31]
 8000e22:	4613      	mov	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4413      	add	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea8 <usart_drv_send+0xdc>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	623b      	str	r3, [r7, #32]
	
	while(1) {
		// 送信
		if ((ercd = usart_send(p_info->ch, p_data, size)) < 0) {
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	69b9      	ldr	r1, [r7, #24]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fce5 	bl	8001808 <usart_send>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			goto EXIT;
		} else {
			// 送信できたサイズ分だけ更新
			p_data += ercd;
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e46:	4413      	add	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
			size -= ercd;
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
			cnt += ercd;
 8000e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e56:	4413      	add	r3, r2
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
			
			// 全データ送信完了
			if (size == 0) {
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <usart_drv_send+0x9a>
				ercd = cnt;
 8000e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
				break;
 8000e64:	e016      	b.n	8000e94 <usart_drv_send+0xc8>
				
			// 送信を待たない
			} else if (tmout == 0) {
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <usart_drv_send+0xa6>
				ercd = cnt;
 8000e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				break;
 8000e70:	e010      	b.n	8000e94 <usart_drv_send+0xc8>
				
			// 全部送信できていないから待つ場合
			} else if (tmout > 0) {
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	dddb      	ble.n	8000e30 <usart_drv_send+0x64>
				// いったんウェイト
				osSignalWait(UART_DRV_SEND_DONE, SLEEP_TIME);
 8000e78:	463b      	mov	r3, r7
 8000e7a:	220a      	movs	r2, #10
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 fbda 	bl	8003638 <osSignalWait>
				tmout -= SLEEP_TIME;
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	3b0a      	subs	r3, #10
 8000e88:	613b      	str	r3, [r7, #16]
				// タイムアウト発生
				if (tmout < 0) {
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	dacf      	bge.n	8000e30 <usart_drv_send+0x64>
					ercd = cnt;
 8000e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		
	}
	
EXIT:
	this->snd_thread_id = NULL;
 8000e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
	
	return ercd;
 8000e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3730      	adds	r7, #48	@ 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000d0 	.word	0x200000d0
 8000ea8:	0800623c 	.word	0x0800623c

08000eac <usart_drv_recv>:

// 受信
int32_t usart_drv_recv(USART_DRV_DEV dev, uint8_t *p_data, uint32_t size, int32_t tmout)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	@ 0x30
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	61b9      	str	r1, [r7, #24]
 8000eb4:	617a      	str	r2, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	77fb      	strb	r3, [r7, #31]
	USART_DRV_CB *this;
	const USART_DEV_INFO *p_info;
	uint32_t ercd;
	uint32_t cnt = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
	
	// パラメータチェック
	if (dev >= USART_DRV_DEV_MAX) {
 8000ec0:	7ffb      	ldrb	r3, [r7, #31]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <usart_drv_recv+0x20>
		return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e057      	b.n	8000f7c <usart_drv_recv+0xd0>
	}
	if (p_data == NULL) {
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <usart_drv_recv+0x2c>
		return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e051      	b.n	8000f7c <usart_drv_recv+0xd0>
	}
	
	// 制御ブロック取得
	this = get_myself(dev);
 8000ed8:	7ffa      	ldrb	r2, [r7, #31]
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4a28      	ldr	r2, [pc, #160]	@ (8000f84 <usart_drv_recv+0xd8>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
	
	// クローズ状態でなければ終了
	if (this->status != ST_OPEN) {
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d002      	beq.n	8000ef6 <usart_drv_recv+0x4a>
		return -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	e042      	b.n	8000f7c <usart_drv_recv+0xd0>
	}
	
	// タスク情報を取得
	this->rcv_thread_id = osThreadGetId();
 8000ef6:	f002 fb44 	bl	8003582 <osThreadGetId>
 8000efa:	4602      	mov	r2, r0
 8000efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efe:	609a      	str	r2, [r3, #8]
	
	// USART情報取得
	p_info = &usart_info_tbl[dev];
 8000f00:	7ffa      	ldrb	r2, [r7, #31]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f88 <usart_drv_recv+0xdc>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	623b      	str	r3, [r7, #32]
	
	while(1) {
		// 送信
		if ((ercd = usart_recv(p_info->ch, p_data, size)) < 0) {
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fce1 	bl	80018e0 <usart_recv>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			goto EXIT;
		} else {
			// 受信できたサイズ分だけ更新
			p_data += ercd;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f26:	4413      	add	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
			size -= ercd;
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
			cnt += ercd;
 8000f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f36:	4413      	add	r3, r2
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
			
			// 全データ受信完了
			if (size == 0) {
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <usart_drv_recv+0x9a>
				ercd = cnt;
 8000f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
				break;
 8000f44:	e016      	b.n	8000f74 <usart_drv_recv+0xc8>
				
			// 受信を待たない
			} else if (tmout == 0) {
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <usart_drv_recv+0xa6>
				ercd = cnt;
 8000f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				break;
 8000f50:	e010      	b.n	8000f74 <usart_drv_recv+0xc8>
				
			// 全部送信できていないから待つ場合
			} else if (tmout > 0) {
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	dddb      	ble.n	8000f10 <usart_drv_recv+0x64>
				// いったんウェイト
				osSignalWait(UART_DRV_RECV_DONE, SLEEP_TIME);
 8000f58:	463b      	mov	r3, r7
 8000f5a:	220a      	movs	r2, #10
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fb6a 	bl	8003638 <osSignalWait>
				tmout -= SLEEP_TIME;
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3b0a      	subs	r3, #10
 8000f68:	613b      	str	r3, [r7, #16]
				// タイムアウト発生
				if (tmout < 0) {
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dacf      	bge.n	8000f10 <usart_drv_recv+0x64>
					ercd = cnt;
 8000f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		
	}
	
EXIT:
	this->rcv_thread_id = NULL;
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
	
	return ercd;
 8000f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3730      	adds	r7, #48	@ 0x30
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200000d0 	.word	0x200000d0
 8000f88:	0800623c 	.word	0x0800623c

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	@ 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200000dc 	.word	0x200000dc
 8000fbc:	20000130 	.word	0x20000130

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b096      	sub	sp, #88	@ 0x58
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f000 fd13 	bl	80019f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f867 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 f937 	bl	8001240 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fd2:	f000 f8d5 	bl	8001180 <MX_SPI1_Init>
  MX_UART4_Init();
 8000fd6:	f000 f909 	bl	80011ec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	size = sizeof(init_func)/sizeof(init_func[0]);
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	
	for (i = 0; i < size; i++) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000fe6:	e00a      	b.n	8000ffe <main+0x3e>
		init_func[i]();
 8000fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000fec:	4a24      	ldr	r2, [pc, #144]	@ (8001080 <main+0xc0>)
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	4798      	blx	r3
	for (i = 0; i < size; i++) {
 8000ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000ffe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001002:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001006:	429a      	cmp	r2, r3
 8001008:	d3ee      	bcc.n	8000fe8 <main+0x28>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <main+0xc4>)
 800100c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001010:	461d      	mov	r5, r3
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800101e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fa60 	bl	80034ea <osThreadCreate>
 800102a:	4603      	mov	r3, r0
 800102c:	4a16      	ldr	r2, [pc, #88]	@ (8001088 <main+0xc8>)
 800102e:	6013      	str	r3, [r2, #0]

  /* definition and creation of CanTask */
  osThreadDef(CanTask, StartCanTask, osPriorityLow, 0, 128);
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <main+0xcc>)
 8001032:	f107 041c 	add.w	r4, r7, #28
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CanTaskHandle = osThreadCreate(osThread(CanTask), NULL);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fa4d 	bl	80034ea <osThreadCreate>
 8001050:	4603      	mov	r3, r0
 8001052:	4a0f      	ldr	r2, [pc, #60]	@ (8001090 <main+0xd0>)
 8001054:	6013      	str	r3, [r2, #0]

  /* definition and creation of AppTask */
  osThreadDef(AppTask, StartAppTask, osPriorityLow, 0, 256);
 8001056:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <main+0xd4>)
 8001058:	463c      	mov	r4, r7
 800105a:	461d      	mov	r5, r3
 800105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001060:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AppTaskHandle = osThreadCreate(osThread(AppTask), NULL);
 8001068:	463b      	mov	r3, r7
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fa3c 	bl	80034ea <osThreadCreate>
 8001072:	4603      	mov	r3, r0
 8001074:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <main+0xd8>)
 8001076:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001078:	f002 fa30 	bl	80034dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <main+0xbc>
 8001080:	08006248 	.word	0x08006248
 8001084:	080061d0 	.word	0x080061d0
 8001088:	200003d0 	.word	0x200003d0
 800108c:	080061f4 	.word	0x080061f4
 8001090:	200003d4 	.word	0x200003d4
 8001094:	08006218 	.word	0x08006218
 8001098:	200003d8 	.word	0x200003d8

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	@ 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	2234      	movs	r2, #52	@ 0x34
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 f804 	bl	80060b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <SystemClock_Config+0xdc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001178 <SystemClock_Config+0xdc>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d0:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <SystemClock_Config+0xdc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4b26      	ldr	r3, [pc, #152]	@ (800117c <SystemClock_Config+0xe0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a25      	ldr	r2, [pc, #148]	@ (800117c <SystemClock_Config+0xe0>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b23      	ldr	r3, [pc, #140]	@ (800117c <SystemClock_Config+0xe0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2310      	movs	r3, #16
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001108:	2300      	movs	r3, #0
 800110a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800110c:	2308      	movs	r3, #8
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001110:	23b4      	movs	r3, #180	@ 0xb4
 8001112:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4618      	mov	r0, r3
 8001126:	f001 fab1 	bl	800268c <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001130:	f000 f8b8 	bl	80012a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001134:	f000 ff96 	bl	8002064 <HAL_PWREx_EnableOverDrive>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800113e:	f000 f8b1 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2302      	movs	r3, #2
 8001148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	2105      	movs	r1, #5
 8001160:	4618      	mov	r0, r3
 8001162:	f000 ffcf 	bl	8002104 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800116c:	f000 f89a 	bl	80012a4 <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	@ 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001184:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <MX_SPI1_Init+0x64>)
 8001186:	4a18      	ldr	r2, [pc, #96]	@ (80011e8 <MX_SPI1_Init+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_SPI1_Init+0x64>)
 800118c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001190:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_SPI1_Init+0x64>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_SPI1_Init+0x64>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_SPI1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_SPI1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_SPI1_Init+0x64>)
 80011ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_SPI1_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <MX_SPI1_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_SPI1_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <MX_SPI1_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_SPI1_Init+0x64>)
 80011cc:	220a      	movs	r2, #10
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_SPI1_Init+0x64>)
 80011d2:	f001 fcf9 	bl	8002bc8 <HAL_SPI_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011dc:	f000 f862 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000330 	.word	0x20000330
 80011e8:	40013000 	.word	0x40013000

080011ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_UART4_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	@ (800123c <MX_UART4_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <MX_UART4_Init+0x4c>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <MX_UART4_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_UART4_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001224:	f001 fe6c 	bl	8002f00 <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800122e:	f000 f839 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000388 	.word	0x20000388
 800123c:	40004c00 	.word	0x40004c00

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <MX_GPIO_Init+0x30>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <MX_GPIO_Init+0x30>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <MX_GPIO_Init+0x30>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f002 f987 	bl	8003590 <osDelay>
 8001282:	e7fb      	b.n	800127c <StartDefaultTask+0x8>

08001284 <StartCanTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTask */
void StartCanTask(void const * argument)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f002 f97f 	bl	8003590 <osDelay>
 8001292:	e7fb      	b.n	800128c <StartCanTask+0x8>

08001294 <StartAppTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAppTask */
void StartAppTask(void const * argument)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAppTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f002 f977 	bl	8003590 <osDelay>
 80012a2:	e7fb      	b.n	800129c <StartAppTask+0x8>

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_MspInit+0x54>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	4a11      	ldr	r2, [pc, #68]	@ (8001304 <HAL_MspInit+0x54>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_MspInit+0x54>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_MspInit+0x54>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <HAL_MspInit+0x54>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <HAL_MspInit+0x54>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	210f      	movs	r1, #15
 80012f2:	f06f 0001 	mvn.w	r0, #1
 80012f6:	f000 fcc8 	bl	8001c8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1d      	ldr	r2, [pc, #116]	@ (800139c <HAL_SPI_MspInit+0x94>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d133      	bne.n	8001392 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <HAL_SPI_MspInit+0x98>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <HAL_SPI_MspInit+0x98>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001338:	6453      	str	r3, [r2, #68]	@ 0x44
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_SPI_MspInit+0x98>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_SPI_MspInit+0x98>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <HAL_SPI_MspInit+0x98>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_SPI_MspInit+0x98>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001362:	23e0      	movs	r3, #224	@ 0xe0
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001372:	2305      	movs	r3, #5
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <HAL_SPI_MspInit+0x9c>)
 800137e:	f000 fcdd 	bl	8001d3c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2105      	movs	r1, #5
 8001386:	2023      	movs	r0, #35	@ 0x23
 8001388:	f000 fc7f 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800138c:	2023      	movs	r0, #35	@ 0x23
 800138e:	f000 fc98 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	@ 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40013000 	.word	0x40013000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	@ (800143c <HAL_UART_MspInit+0x94>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d133      	bne.n	8001432 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <HAL_UART_MspInit+0x98>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <HAL_UART_MspInit+0x98>)
 80013d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_UART_MspInit+0x98>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <HAL_UART_MspInit+0x98>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <HAL_UART_MspInit+0x98>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_UART_MspInit+0x98>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001402:	2303      	movs	r3, #3
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001412:	2308      	movs	r3, #8
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4809      	ldr	r0, [pc, #36]	@ (8001444 <HAL_UART_MspInit+0x9c>)
 800141e:	f000 fc8d 	bl	8001d3c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2105      	movs	r1, #5
 8001426:	2034      	movs	r0, #52	@ 0x34
 8001428:	f000 fc2f 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800142c:	2034      	movs	r0, #52	@ 0x34
 800142e:	f000 fc48 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	@ 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40004c00 	.word	0x40004c00
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <NMI_Handler+0x4>

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <MemManage_Handler+0x4>

08001460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <UsageFault_Handler+0x4>

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001482:	f000 fb07 	bl	8001a94 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001486:	f003 fecd 	bl	8005224 <xTaskGetSchedulerState>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d001      	beq.n	8001494 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001490:	f004 fb82 	bl	8005b98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <SPI1_IRQHandler+0x10>)
 800149e:	f001 fc1d 	bl	8002cdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000330 	.word	0x20000330

080014ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <usart_common_handler>:
	USART_CR2_STOP_1,				// USART_STOPBIT_2
};

// 共通割り込み処理
void usart_common_handler(USART_CH ch)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	USART_CB *this = get_myself(ch);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f240 4224 	movw	r2, #1060	@ 0x424
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001610 <usart_common_handler+0x140>)
 80014e6:	4413      	add	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]
	USART_TypeDef *p_reg;
	RING_BUFF *p_ring_buf;
	uint8_t recv_data;
	
	// ベースレジスタ取得
	p_reg = get_reg(ch);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4a49      	ldr	r2, [pc, #292]	@ (8001614 <usart_common_handler+0x144>)
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	4413      	add	r3, r2
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	613b      	str	r3, [r7, #16]
	
	// エラーチェック
	if (p_reg->SR & (USART_SR_PE | USART_SR_FE | USART_SR_NE | USART_SR_ORE)) {
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00e      	beq.n	8001520 <usart_common_handler+0x50>
		//clr_bit(p_reg->ICR, USART_ICR_PECF);
		//clr_bit(p_reg->ICR, USART_ICR_FECF);
		//clr_bit(p_reg->ICR, USART_ICR_NCF);
		//clr_bit(p_reg->ICR, USART_ICR_ORECF);
		// エラーコールバック通知
		if (this->err_cb != NULL) {
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001508:	2b00      	cmp	r3, #0
 800150a:	d07c      	beq.n	8001606 <usart_common_handler+0x136>
			this->err_cb(ch, this->p_ctx);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	f8d2 1420 	ldr.w	r1, [r2, #1056]	@ 0x420
 8001518:	79fa      	ldrb	r2, [r7, #7]
 800151a:	4610      	mov	r0, r2
 800151c:	4798      	blx	r3
		}
		return;
 800151e:	e072      	b.n	8001606 <usart_common_handler+0x136>
	}
	
	// 受信データあり
	if (p_reg->SR & USART_SR_RXNE) {
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	2b00      	cmp	r3, #0
 800152a:	d034      	beq.n	8001596 <usart_common_handler+0xc6>
		// 受信データ取得
		recv_data = p_reg->DR;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	73fb      	strb	r3, [r7, #15]
		//リングバッファ情報を取得
		p_ring_buf = &(this->rcv_buf);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001538:	60bb      	str	r3, [r7, #8]
		// リングバッファに書き込み
		p_ring_buf->data[p_ring_buf->w_idx] = recv_data;
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	7bf9      	ldrb	r1, [r7, #15]
 8001544:	54d1      	strb	r1, [r2, r3]
		p_ring_buf->w_idx = (p_ring_buf->w_idx + 1) & (BUFF_SIZE - 1);
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800154c:	3301      	adds	r3, #1
 800154e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		// 上書き発生
		if (p_ring_buf->w_idx == p_ring_buf->r_idx) {
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001564:	429a      	cmp	r2, r3
 8001566:	d108      	bne.n	800157a <usart_common_handler+0xaa>
			p_ring_buf->r_idx = (p_ring_buf->r_idx + 1) & (BUFF_SIZE - 1);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800156e:	3301      	adds	r3, #1
 8001570:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}
		// コールバック通知
		if (this->recv_cb != NULL) {
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <usart_common_handler+0xc6>
			this->recv_cb(ch, this->p_ctx);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	@ 0x420
 8001590:	79fa      	ldrb	r2, [r7, #7]
 8001592:	4610      	mov	r0, r2
 8001594:	4798      	blx	r3
		}
	}
	
	// 送信データがある
	p_ring_buf = &(this->snd_buf);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3304      	adds	r3, #4
 800159a:	60bb      	str	r3, [r7, #8]
	if (p_ring_buf->w_idx != p_ring_buf->r_idx) {
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d025      	beq.n	80015f8 <usart_common_handler+0x128>
		// 送信レジスタが空いている
		if ((p_reg->SR & USART_SR_TXE) != 0) {
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d027      	beq.n	8001608 <usart_common_handler+0x138>
			// 送信レジスタにデータをセット
			p_reg->DR = p_ring_buf->data[p_ring_buf->r_idx];
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	5cd3      	ldrb	r3, [r2, r3]
 80015c2:	461a      	mov	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	605a      	str	r2, [r3, #4]
			p_ring_buf->r_idx = (p_ring_buf->r_idx + 1) & (BUFF_SIZE - 1);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80015ce:	3301      	adds	r3, #1
 80015d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			// コールバック通知
			if (this->send_cb != NULL) {
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d011      	beq.n	8001608 <usart_common_handler+0x138>
				this->send_cb(ch, this->p_ctx);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	f8d2 1420 	ldr.w	r1, [r2, #1056]	@ 0x420
 80015f0:	79fa      	ldrb	r2, [r7, #7]
 80015f2:	4610      	mov	r0, r2
 80015f4:	4798      	blx	r3
 80015f6:	e007      	b.n	8001608 <usart_common_handler+0x138>
			}
		}
	// 送信データがない
	} else {
		clr_bit(p_reg->CR1, USART_CR1_TXEIE_Pos);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	e000      	b.n	8001608 <usart_common_handler+0x138>
		return;
 8001606:	bf00      	nop
	}
}
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200003dc 	.word	0x200003dc
 8001614:	08006268 	.word	0x08006268

08001618 <UART4_IRQHandler>:
//void USART3_IRQHandler(void)
//{
//	usart_common_handler(USART_CH_3);
//}
void UART4_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	usart_common_handler(USART_CH_4);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff ff57 	bl	80014d0 <usart_common_handler>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <usart_config>:
//{
//	usart_common_handler(USART_CH_8);
//}
// コンフィグ
int32_t usart_config(USART_CH ch, USART_OPEN_PAR *p_open_par)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *p_reg;
	uint32_t peri_clk;
	
	// パラメータチェック
	if ((p_open_par->len >= USART_LEN_MAX) ||			// 長さチェック
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d807      	bhi.n	800164c <usart_config+0x24>
		(p_open_par->stopbit >= USART_STOPBIT_MAX) ||	// ストップビットチェック
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	785b      	ldrb	r3, [r3, #1]
	if ((p_open_par->len >= USART_LEN_MAX) ||			// 長さチェック
 8001640:	2b01      	cmp	r3, #1
 8001642:	d803      	bhi.n	800164c <usart_config+0x24>
		(p_open_par->parity >= USART_PARITY_MAX)) {	// パリティチェック
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	789b      	ldrb	r3, [r3, #2]
		(p_open_par->stopbit >= USART_STOPBIT_MAX) ||	// ストップビットチェック
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <usart_config+0x28>
		return osErrorParameter;
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	e064      	b.n	800171a <usart_config+0xf2>
	}
	
	// ベースレジスタ取得
	p_reg = get_reg(ch);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4a34      	ldr	r2, [pc, #208]	@ (8001724 <usart_config+0xfc>)
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	4413      	add	r3, r2
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]
	
	// クロック設定
	//peri_clk = HAL_RCCEx_GetPeriphCLKFreq(get_clk(ch));
	//p_reg->BRR = peri_clk/p_open_par->baudrate;
	p_reg->BRR = 0x187;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f240 1287 	movw	r2, #391	@ 0x187
 8001662:	609a      	str	r2, [r3, #8]
	
	// データ長、パリティ設定
	p_reg->CR1 |= length_reg_config_tbl[p_open_par->len];
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	7812      	ldrb	r2, [r2, #0]
 800166c:	4611      	mov	r1, r2
 800166e:	4a2e      	ldr	r2, [pc, #184]	@ (8001728 <usart_config+0x100>)
 8001670:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001674:	431a      	orrs	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	60da      	str	r2, [r3, #12]
	p_reg->CR1 |= parity_reg_config_tbl[p_open_par->parity];
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	7892      	ldrb	r2, [r2, #2]
 8001682:	4611      	mov	r1, r2
 8001684:	4a29      	ldr	r2, [pc, #164]	@ (800172c <usart_config+0x104>)
 8001686:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800168a:	431a      	orrs	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	60da      	str	r2, [r3, #12]
	
	// ストップビット設定
	p_reg->CR2 |=  stopbit_reg_config_tbl[p_open_par->stopbit];
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	7852      	ldrb	r2, [r2, #1]
 8001698:	4611      	mov	r1, r2
 800169a:	4a25      	ldr	r2, [pc, #148]	@ (8001730 <usart_config+0x108>)
 800169c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	611a      	str	r2, [r3, #16]
	
	// USART有効
	set_bit(p_reg->CR1, USART_CR1_UE_Pos);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	60da      	str	r2, [r3, #12]
	
	// 割り込み有効
	set_bit(p_reg->CR1, USART_CR1_PEIE_Pos);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	60da      	str	r2, [r3, #12]
	set_bit(p_reg->CR1, USART_CR1_RXNEIE_Pos);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f043 0220 	orr.w	r2, r3, #32
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	60da      	str	r2, [r3, #12]
	set_bit(p_reg->CR1, USART_CR1_RE_Pos);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f043 0204 	orr.w	r2, r3, #4
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	60da      	str	r2, [r3, #12]
	set_bit(p_reg->CR1, USART_CR1_TE_Pos);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f043 0208 	orr.w	r2, r3, #8
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	60da      	str	r2, [r3, #12]
	
	// 割り込み有効
    HAL_NVIC_SetPriority(get_irqn(ch), get_pri(ch), 0);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001724 <usart_config+0xfc>)
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	4413      	add	r3, r2
 80016ea:	3304      	adds	r3, #4
 80016ec:	f993 0000 	ldrsb.w	r0, [r3]
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001724 <usart_config+0xfc>)
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	3308      	adds	r3, #8
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	4619      	mov	r1, r3
 8001700:	f000 fac3 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(get_irqn(ch));
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <usart_config+0xfc>)
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	3304      	adds	r3, #4
 800170e:	f993 3000 	ldrsb.w	r3, [r3]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fad5 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
	
	return osOK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	08006268 	.word	0x08006268
 8001728:	08006278 	.word	0x08006278
 800172c:	08006280 	.word	0x08006280
 8001730:	0800628c 	.word	0x0800628c

08001734 <usart_init>:

// 初期化
osStatus usart_init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	USART_CB *this;
	USART_CH ch;
	
	for (ch = 0; ch < USART_CH_MAX; ch++) {
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e013      	b.n	8001768 <usart_init+0x34>
		// 制御ブロックの取得
		this = get_myself(ch);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f240 4224 	movw	r2, #1060	@ 0x424
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a0b      	ldr	r2, [pc, #44]	@ (8001778 <usart_init+0x44>)
 800174c:	4413      	add	r3, r2
 800174e:	603b      	str	r3, [r7, #0]
		// 制御ブロックのクリア
		memset(this, 0, sizeof(USART_CB));
 8001750:	f240 4224 	movw	r2, #1060	@ 0x424
 8001754:	2100      	movs	r1, #0
 8001756:	6838      	ldr	r0, [r7, #0]
 8001758:	f004 fcae 	bl	80060b8 <memset>
		// ★割り込みの登録★
		
		// クローズ状態に更新
		this->status = ST_CLOSE;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
	for (ch = 0; ch < USART_CH_MAX; ch++) {
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	3301      	adds	r3, #1
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0e8      	beq.n	8001740 <usart_init+0xc>
	}
	
	return osOK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200003dc 	.word	0x200003dc

0800177c <usart_open>:

// オープン関数
osStatus usart_open(USART_CH ch, USART_OPEN_PAR *p_open_par, USART_CALLBACK send_cb, USART_CALLBACK recv_cb, USART_CALLBACK err_cb, void* p_ctx)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
	USART_CB *this;
	osStatus ercd;
	
	// パラメータチェック
	if (ch >= USART_CH_MAX) {
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <usart_open+0x1a>
		return osErrorParameter;
 8001792:	2380      	movs	r3, #128	@ 0x80
 8001794:	e032      	b.n	80017fc <usart_open+0x80>
	}
	if (p_open_par == NULL) {
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <usart_open+0x24>
		return osErrorParameter;
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	e02d      	b.n	80017fc <usart_open+0x80>
	}
	
	// 制御ブロック取得
	this = get_myself(ch);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	f240 4224 	movw	r2, #1060	@ 0x424
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	4a16      	ldr	r2, [pc, #88]	@ (8001804 <usart_open+0x88>)
 80017ac:	4413      	add	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
	
	// クローズ状態でなければ終了
	if (this->status != ST_CLOSE) {
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d001      	beq.n	80017bc <usart_open+0x40>
		return osErrorParameter;
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	e01f      	b.n	80017fc <usart_open+0x80>
	}
	
	// レジスタ設定
	if ((ercd = usart_config(ch, p_open_par)) != osOK) {
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff31 	bl	8001628 <usart_config>
 80017c6:	4603      	mov	r3, r0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d113      	bne.n	80017f8 <usart_open+0x7c>
		goto EXIT;
	}
	
	// コールバック設定
	this->send_cb = send_cb;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
	this->recv_cb = recv_cb;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
	this->err_cb = err_cb;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	6a3a      	ldr	r2, [r7, #32]
 80017e4:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
	this->p_ctx = p_ctx;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ec:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
	
	// 状態をオープンにする
	this->status = ST_OPEN;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2202      	movs	r2, #2
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e000      	b.n	80017fa <usart_open+0x7e>
		goto EXIT;
 80017f8:	bf00      	nop
	
EXIT:
	return ercd;
 80017fa:	693b      	ldr	r3, [r7, #16]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200003dc 	.word	0x200003dc

08001808 <usart_send>:
	// ★後で実装★
}

// 送信関数
int32_t usart_send(USART_CH ch, uint8_t *p_data, uint32_t size)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	73fb      	strb	r3, [r7, #15]
	USART_CB *this;
	RING_BUFF *p_ring_buf;
	USART_TypeDef *p_reg;
	uint32_t send_sz = size;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	61fb      	str	r3, [r7, #28]
	
	// パラメータチェック
	if (ch >= USART_CH_MAX) {
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <usart_send+0x1e>
		return -1;
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	e052      	b.n	80018cc <usart_send+0xc4>
	}
	if (p_data == NULL) {
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <usart_send+0x2a>
		return -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	e04c      	b.n	80018cc <usart_send+0xc4>
	}
	
	// 制御ブロック取得
	this = get_myself(ch);
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f240 4224 	movw	r2, #1060	@ 0x424
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	4a26      	ldr	r2, [pc, #152]	@ (80018d8 <usart_send+0xd0>)
 800183e:	4413      	add	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
	
	// オープン状態でなければ終了
	if (this->status != ST_OPEN) {
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d002      	beq.n	8001850 <usart_send+0x48>
		return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e03d      	b.n	80018cc <usart_send+0xc4>
	}
	
	// ベースレジスタ取得
	p_reg = get_reg(ch);
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	4a22      	ldr	r2, [pc, #136]	@ (80018dc <usart_send+0xd4>)
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
	
	// 割り込み禁止
	__disable_irq();
	
	// リングバッファ情報取得
	p_ring_buf = &(this->snd_buf);
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	3304      	adds	r3, #4
 8001864:	613b      	str	r3, [r7, #16]
	
	do {
		// 空いている場合は詰める
		if ((p_ring_buf->w_idx + 1) != p_ring_buf->r_idx) {
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001874:	429a      	cmp	r2, r3
 8001876:	d018      	beq.n	80018aa <usart_send+0xa2>
			p_ring_buf->data[p_ring_buf->w_idx] = *(p_data++);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8001884:	7819      	ldrb	r1, [r3, #0]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	5499      	strb	r1, [r3, r2]
			p_ring_buf->w_idx = (p_ring_buf->w_idx + 1) & (BUFF_SIZE - 1);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			size--;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	607b      	str	r3, [r7, #4]
		// 空いていない場合は抜ける
		} else {
			break;
		}
	} while (size > 0);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1de      	bne.n	8001866 <usart_send+0x5e>
 80018a8:	e000      	b.n	80018ac <usart_send+0xa4>
			break;
 80018aa:	bf00      	nop
	
	// 送信サイズ更新
	// (*)サイズはデクリメントしているため、送信したいサイズから引けば送信サイズが出る
	send_sz -= size;
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	61fb      	str	r3, [r7, #28]
	// 送信割り込み有効
	if (send_sz > 0) {
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <usart_send+0xbe>
		set_bit(p_reg->CR1, USART_CR1_TXEIE_Pos);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80018c6:	b662      	cpsie	i
}
 80018c8:	bf00      	nop
	}
	
	// 割り込み禁止解除
	__enable_irq();
	
	return send_sz;
 80018ca:	69fb      	ldr	r3, [r7, #28]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3724      	adds	r7, #36	@ 0x24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	200003dc 	.word	0x200003dc
 80018dc:	08006268 	.word	0x08006268

080018e0 <usart_recv>:

// 受信関数
int32_t usart_recv(USART_CH ch, uint8_t *p_data, uint32_t size)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	73fb      	strb	r3, [r7, #15]
	RING_BUFF *p_ring_buf;
	uint32_t recv_sz;
	uint32_t data_sz;
	
	// パラメータチェック
	if (ch >= USART_CH_MAX) {
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <usart_recv+0x1a>
		return -1;
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
 80018f8:	e047      	b.n	800198a <usart_recv+0xaa>
	}
	if (p_data == NULL) {
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <usart_recv+0x26>
		return -1;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	e041      	b.n	800198a <usart_recv+0xaa>
	}
	
	// 制御ブロック取得
	this = get_myself(ch);
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	f240 4224 	movw	r2, #1060	@ 0x424
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <usart_recv+0xb8>)
 8001912:	4413      	add	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
	
	// オープン状態でなければ終了
	if (this->status != ST_OPEN) {
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d002      	beq.n	8001924 <usart_recv+0x44>
		return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e032      	b.n	800198a <usart_recv+0xaa>
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
	
	// 割り込み禁止
	__disable_irq();
	
	// リングバッファ情報取得
	p_ring_buf = &(this->rcv_buf);
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800192e:	617b      	str	r3, [r7, #20]
	
	// リングバッファに入っているデータ数を取得
	data_sz = ((p_ring_buf->w_idx - p_ring_buf->r_idx) & (BUFF_SIZE - 1));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001942:	61fb      	str	r3, [r7, #28]
	// 受信サイズ更新
	// (*) リングバッファに入っているデータ数以上はいらない
	if (data_sz > size) {
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	d901      	bls.n	8001950 <usart_recv+0x70>
		data_sz = size;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	61fb      	str	r3, [r7, #28]
	}
	recv_sz = data_sz;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	613b      	str	r3, [r7, #16]
	
	// とりあえずリングバッファからとってくる
	while (data_sz-- > 0) {
 8001954:	e011      	b.n	800197a <usart_recv+0x9a>
		// リングバッファからデータを取得
		*(p_data++) = p_ring_buf->data[p_ring_buf->r_idx];
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1c59      	adds	r1, r3, #1
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	5c8a      	ldrb	r2, [r1, r2]
 8001966:	701a      	strb	r2, [r3, #0]
		p_ring_buf->r_idx = ((p_ring_buf->r_idx + 1) & (BUFF_SIZE - 1));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800196e:	3301      	adds	r3, #1
 8001970:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	while (data_sz-- > 0) {
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	61fa      	str	r2, [r7, #28]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e8      	bne.n	8001956 <usart_recv+0x76>
  __ASM volatile ("cpsie i" : : : "memory");
 8001984:	b662      	cpsie	i
}
 8001986:	bf00      	nop
	}
	
	// 割り込み禁止解除
	__enable_irq();
	
	return recv_sz;
 8001988:	693b      	ldr	r3, [r7, #16]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	200003dc 	.word	0x200003dc

0800199c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800199c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019a0:	f7ff fd84 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a4:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019a6:	490d      	ldr	r1, [pc, #52]	@ (80019dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a8:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019bc:	4c0a      	ldr	r4, [pc, #40]	@ (80019e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019ca:	f004 fb8b 	bl	80060e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ce:	f7ff faf7 	bl	8000fc0 <main>
  bx  lr    
 80019d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80019e0:	080062a4 	.word	0x080062a4
  ldr r2, =_sbss
 80019e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019e8:	20004558 	.word	0x20004558

080019ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <HAL_Init+0x40>)
 80019fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <HAL_Init+0x40>)
 8001a06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	@ (8001a30 <HAL_Init+0x40>)
 8001a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f92b 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f000 f808 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fc44 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_InitTick+0x54>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_InitTick+0x58>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f943 	bl	8001cde <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00e      	b.n	8001a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b0f      	cmp	r3, #15
 8001a66:	d80a      	bhi.n	8001a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f000 f90b 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <HAL_InitTick+0x5c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_IncTick+0x20>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <HAL_IncTick+0x24>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a04      	ldr	r2, [pc, #16]	@ (8001ab8 <HAL_IncTick+0x24>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000800 	.word	0x20000800

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000800 	.word	0x20000800

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <__NVIC_EnableIRQ+0x38>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	@ (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	@ 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff29 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff3e 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff31 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffa2 	bl	8001c30 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d004      	beq.n	8001d14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2280      	movs	r2, #128	@ 0x80
 8001d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e00c      	b.n	8001d2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2205      	movs	r2, #5
 8001d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	@ 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e165      	b.n	8002024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8154 	bne.w	800201e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d005      	beq.n	8001d8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d130      	bne.n	8001df0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2203      	movs	r2, #3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 0201 	and.w	r2, r3, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d017      	beq.n	8001e2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d123      	bne.n	8001e80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80ae 	beq.w	800201e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800203c <HAL_GPIO_Init+0x300>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	4a5c      	ldr	r2, [pc, #368]	@ (800203c <HAL_GPIO_Init+0x300>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800203c <HAL_GPIO_Init+0x300>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <HAL_GPIO_Init+0x304>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4f      	ldr	r2, [pc, #316]	@ (8002044 <HAL_GPIO_Init+0x308>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d025      	beq.n	8001f56 <HAL_GPIO_Init+0x21a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002048 <HAL_GPIO_Init+0x30c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01f      	beq.n	8001f52 <HAL_GPIO_Init+0x216>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4d      	ldr	r2, [pc, #308]	@ (800204c <HAL_GPIO_Init+0x310>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x212>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002050 <HAL_GPIO_Init+0x314>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x20e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	@ (8002054 <HAL_GPIO_Init+0x318>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x20a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002058 <HAL_GPIO_Init+0x31c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x206>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a49      	ldr	r2, [pc, #292]	@ (800205c <HAL_GPIO_Init+0x320>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x202>
 8001f3a:	2306      	movs	r3, #6
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x21c>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	@ (8002040 <HAL_GPIO_Init+0x304>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9a:	4a31      	ldr	r2, [pc, #196]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc4:	4a26      	ldr	r2, [pc, #152]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fca:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fee:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <HAL_GPIO_Init+0x324>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_GPIO_Init+0x324>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae96 	bls.w	8001d58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40013c00 	.word	0x40013c00

08002064 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4b20      	ldr	r3, [pc, #128]	@ (80020f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	@ 0x40
 800207e:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800208a:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002090:	f7ff fd14 	bl	8001abc <HAL_GetTick>
 8002094:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002096:	e009      	b.n	80020ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002098:	f7ff fd10 	bl	8001abc <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020a6:	d901      	bls.n	80020ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e01f      	b.n	80020ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <HAL_PWREx_EnableOverDrive+0x98>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b8:	d1ee      	bne.n	8002098 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c0:	f7ff fcfc 	bl	8001abc <HAL_GetTick>
 80020c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020c6:	e009      	b.n	80020dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020c8:	f7ff fcf8 	bl	8001abc <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020d6:	d901      	bls.n	80020dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e007      	b.n	80020ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <HAL_PWREx_EnableOverDrive+0x98>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020e8:	d1ee      	bne.n	80020c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	420e0040 	.word	0x420e0040
 80020fc:	40007000 	.word	0x40007000
 8002100:	420e0044 	.word	0x420e0044

08002104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0cc      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002118:	4b68      	ldr	r3, [pc, #416]	@ (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d90c      	bls.n	8002140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b65      	ldr	r3, [pc, #404]	@ (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b63      	ldr	r3, [pc, #396]	@ (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0b8      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002158:	4b59      	ldr	r3, [pc, #356]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4a58      	ldr	r2, [pc, #352]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002162:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002170:	4b53      	ldr	r3, [pc, #332]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4a52      	ldr	r2, [pc, #328]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800217a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b50      	ldr	r3, [pc, #320]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	494d      	ldr	r1, [pc, #308]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d044      	beq.n	8002224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b47      	ldr	r3, [pc, #284]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d119      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e07f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	4b3f      	ldr	r3, [pc, #252]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e06f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b3b      	ldr	r3, [pc, #236]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e067      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e2:	4b37      	ldr	r3, [pc, #220]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4934      	ldr	r1, [pc, #208]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f4:	f7ff fc62 	bl	8001abc <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fc:	f7ff fc5e 	bl	8001abc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e04f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 020c 	and.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	429a      	cmp	r2, r3
 8002222:	d1eb      	bne.n	80021fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002224:	4b25      	ldr	r3, [pc, #148]	@ (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d20c      	bcs.n	800224c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b20      	ldr	r3, [pc, #128]	@ (80022bc <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e032      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002258:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4916      	ldr	r1, [pc, #88]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002276:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	490e      	ldr	r1, [pc, #56]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800228a:	f000 f855 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 800228e:	4602      	mov	r2, r0
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	490a      	ldr	r1, [pc, #40]	@ (80022c4 <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	5ccb      	ldrb	r3, [r1, r3]
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	4a09      	ldr	r2, [pc, #36]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fbc2 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023c00 	.word	0x40023c00
 80022c0:	40023800 	.word	0x40023800
 80022c4:	08006250 	.word	0x08006250
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0a9b      	lsrs	r3, r3, #10
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	08006260 	.word	0x08006260

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002314:	f7ff ffdc 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0b5b      	lsrs	r3, r3, #13
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	08006260 	.word	0x08006260

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800233c:	b0a6      	sub	sp, #152	@ 0x98
 800233e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235e:	4bc8      	ldr	r3, [pc, #800]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b0c      	cmp	r3, #12
 8002368:	f200 817e 	bhi.w	8002668 <HAL_RCC_GetSysClockFreq+0x330>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <HAL_RCC_GetSysClockFreq+0x3c>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	080023a9 	.word	0x080023a9
 8002378:	08002669 	.word	0x08002669
 800237c:	08002669 	.word	0x08002669
 8002380:	08002669 	.word	0x08002669
 8002384:	080023b1 	.word	0x080023b1
 8002388:	08002669 	.word	0x08002669
 800238c:	08002669 	.word	0x08002669
 8002390:	08002669 	.word	0x08002669
 8002394:	080023b9 	.word	0x080023b9
 8002398:	08002669 	.word	0x08002669
 800239c:	08002669 	.word	0x08002669
 80023a0:	08002669 	.word	0x08002669
 80023a4:	08002523 	.word	0x08002523
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a8:	4bb6      	ldr	r3, [pc, #728]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x34c>)
 80023aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80023ae:	e15f      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b0:	4bb5      	ldr	r3, [pc, #724]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 80023b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80023b6:	e15b      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b8:	4bb1      	ldr	r3, [pc, #708]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c4:	4bae      	ldr	r3, [pc, #696]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d031      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d0:	4bab      	ldr	r3, [pc, #684]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	2200      	movs	r2, #0
 80023d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80023e4:	2300      	movs	r3, #0
 80023e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80023e8:	4ba7      	ldr	r3, [pc, #668]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 80023ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023ee:	462a      	mov	r2, r5
 80023f0:	fb03 f202 	mul.w	r2, r3, r2
 80023f4:	2300      	movs	r3, #0
 80023f6:	4621      	mov	r1, r4
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	4aa2      	ldr	r2, [pc, #648]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 8002400:	4621      	mov	r1, r4
 8002402:	fba1 1202 	umull	r1, r2, r1, r2
 8002406:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002408:	460a      	mov	r2, r1
 800240a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800240c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800240e:	4413      	add	r3, r2
 8002410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002416:	2200      	movs	r2, #0
 8002418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800241a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800241c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002420:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002424:	f7fd fefc 	bl	8000220 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4613      	mov	r3, r2
 800242e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002432:	e064      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002434:	4b92      	ldr	r3, [pc, #584]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	2200      	movs	r2, #0
 800243c:	653b      	str	r3, [r7, #80]	@ 0x50
 800243e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002448:	2300      	movs	r3, #0
 800244a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800244c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002450:	4622      	mov	r2, r4
 8002452:	462b      	mov	r3, r5
 8002454:	f04f 0000 	mov.w	r0, #0
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	0159      	lsls	r1, r3, #5
 800245e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002462:	0150      	lsls	r0, r2, #5
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4621      	mov	r1, r4
 800246a:	1a51      	subs	r1, r2, r1
 800246c:	6139      	str	r1, [r7, #16]
 800246e:	4629      	mov	r1, r5
 8002470:	eb63 0301 	sbc.w	r3, r3, r1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002482:	4659      	mov	r1, fp
 8002484:	018b      	lsls	r3, r1, #6
 8002486:	4651      	mov	r1, sl
 8002488:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248c:	4651      	mov	r1, sl
 800248e:	018a      	lsls	r2, r1, #6
 8002490:	4651      	mov	r1, sl
 8002492:	ebb2 0801 	subs.w	r8, r2, r1
 8002496:	4659      	mov	r1, fp
 8002498:	eb63 0901 	sbc.w	r9, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b0:	4690      	mov	r8, r2
 80024b2:	4699      	mov	r9, r3
 80024b4:	4623      	mov	r3, r4
 80024b6:	eb18 0303 	adds.w	r3, r8, r3
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	462b      	mov	r3, r5
 80024be:	eb49 0303 	adc.w	r3, r9, r3
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024d0:	4629      	mov	r1, r5
 80024d2:	028b      	lsls	r3, r1, #10
 80024d4:	4621      	mov	r1, r4
 80024d6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024da:	4621      	mov	r1, r4
 80024dc:	028a      	lsls	r2, r1, #10
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024e6:	2200      	movs	r2, #0
 80024e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80024ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80024ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024f0:	f7fd fe96 	bl	8000220 <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024fe:	4b60      	ldr	r3, [pc, #384]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	0c1b      	lsrs	r3, r3, #16
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	3301      	adds	r3, #1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002510:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002520:	e0a6      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002522:	4b57      	ldr	r3, [pc, #348]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800252a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252e:	4b54      	ldr	r3, [pc, #336]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d02a      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b51      	ldr	r3, [pc, #324]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	2200      	movs	r2, #0
 8002542:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002544:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800254c:	2100      	movs	r1, #0
 800254e:	4b4e      	ldr	r3, [pc, #312]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 8002550:	fb03 f201 	mul.w	r2, r3, r1
 8002554:	2300      	movs	r3, #0
 8002556:	fb00 f303 	mul.w	r3, r0, r3
 800255a:	4413      	add	r3, r2
 800255c:	4a4a      	ldr	r2, [pc, #296]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x350>)
 800255e:	fba0 1202 	umull	r1, r2, r0, r2
 8002562:	677a      	str	r2, [r7, #116]	@ 0x74
 8002564:	460a      	mov	r2, r1
 8002566:	673a      	str	r2, [r7, #112]	@ 0x70
 8002568:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800256a:	4413      	add	r3, r2
 800256c:	677b      	str	r3, [r7, #116]	@ 0x74
 800256e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002572:	2200      	movs	r2, #0
 8002574:	633b      	str	r3, [r7, #48]	@ 0x30
 8002576:	637a      	str	r2, [r7, #52]	@ 0x34
 8002578:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800257c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002580:	f7fd fe4e 	bl	8000220 <__aeabi_uldivmod>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4613      	mov	r3, r2
 800258a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800258e:	e05b      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	2200      	movs	r2, #0
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800259a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800259c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025ac:	4642      	mov	r2, r8
 80025ae:	464b      	mov	r3, r9
 80025b0:	f04f 0000 	mov.w	r0, #0
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	0159      	lsls	r1, r3, #5
 80025ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025be:	0150      	lsls	r0, r2, #5
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4641      	mov	r1, r8
 80025c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ca:	4649      	mov	r1, r9
 80025cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025e4:	ebb2 040a 	subs.w	r4, r2, sl
 80025e8:	eb63 050b 	sbc.w	r5, r3, fp
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	00eb      	lsls	r3, r5, #3
 80025f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025fa:	00e2      	lsls	r2, r4, #3
 80025fc:	4614      	mov	r4, r2
 80025fe:	461d      	mov	r5, r3
 8002600:	4643      	mov	r3, r8
 8002602:	18e3      	adds	r3, r4, r3
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	464b      	mov	r3, r9
 8002608:	eb45 0303 	adc.w	r3, r5, r3
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800261a:	4629      	mov	r1, r5
 800261c:	028b      	lsls	r3, r1, #10
 800261e:	4621      	mov	r1, r4
 8002620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002624:	4621      	mov	r1, r4
 8002626:	028a      	lsls	r2, r1, #10
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002630:	2200      	movs	r2, #0
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	61fa      	str	r2, [r7, #28]
 8002636:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263a:	f7fd fdf1 	bl	8000220 <__aeabi_uldivmod>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4613      	mov	r3, r2
 8002644:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002648:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x348>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0f1b      	lsrs	r3, r3, #28
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002656:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800265a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002666:	e003      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x34c>)
 800266a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800266e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002670:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002674:	4618      	mov	r0, r3
 8002676:	3798      	adds	r7, #152	@ 0x98
 8002678:	46bd      	mov	sp, r7
 800267a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	017d7840 	.word	0x017d7840

0800268c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e28d      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8083 	beq.w	80027b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026ac:	4b94      	ldr	r3, [pc, #592]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d019      	beq.n	80026ec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026b8:	4b91      	ldr	r3, [pc, #580]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
        || \
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026d0:	d00c      	beq.n	80026ec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ea:	d10b      	bne.n	8002704 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	4b84      	ldr	r3, [pc, #528]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05b      	beq.n	80027b0 <HAL_RCC_OscConfig+0x124>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d157      	bne.n	80027b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e25a      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270c:	d106      	bne.n	800271c <HAL_RCC_OscConfig+0x90>
 800270e:	4b7c      	ldr	r3, [pc, #496]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a7b      	ldr	r2, [pc, #492]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e01d      	b.n	8002758 <HAL_RCC_OscConfig+0xcc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0xb4>
 8002726:	4b76      	ldr	r3, [pc, #472]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a75      	ldr	r2, [pc, #468]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b73      	ldr	r3, [pc, #460]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a72      	ldr	r2, [pc, #456]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0xcc>
 8002740:	4b6f      	ldr	r3, [pc, #444]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6e      	ldr	r2, [pc, #440]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b6c      	ldr	r3, [pc, #432]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6b      	ldr	r2, [pc, #428]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7ff f9ac 	bl	8001abc <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff f9a8 	bl	8001abc <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	@ 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e21f      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b61      	ldr	r3, [pc, #388]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xdc>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff f998 	bl	8001abc <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002790:	f7ff f994 	bl	8001abc <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	@ 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e20b      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	4b57      	ldr	r3, [pc, #348]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x104>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d06f      	beq.n	800289e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027be:	4b50      	ldr	r3, [pc, #320]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d017      	beq.n	80027fa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
        || \
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d105      	bne.n	80027e2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e2:	4b47      	ldr	r3, [pc, #284]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d11c      	bne.n	8002828 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b44      	ldr	r3, [pc, #272]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d116      	bne.n	8002828 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fa:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_RCC_OscConfig+0x186>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e1d3      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	4b3b      	ldr	r3, [pc, #236]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4937      	ldr	r1, [pc, #220]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	e03a      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002830:	4b34      	ldr	r3, [pc, #208]	@ (8002904 <HAL_RCC_OscConfig+0x278>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7ff f941 	bl	8001abc <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283e:	f7ff f93d 	bl	8001abc <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1b4      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b28      	ldr	r3, [pc, #160]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4925      	ldr	r1, [pc, #148]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]
 8002870:	e015      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002872:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HAL_RCC_OscConfig+0x278>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff f920 	bl	8001abc <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002880:	f7ff f91c 	bl	8001abc <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e193      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d036      	beq.n	8002918 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b2:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7ff f900 	bl	8001abc <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c0:	f7ff f8fc 	bl	8001abc <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e173      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_OscConfig+0x274>)
 80028d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x234>
 80028de:	e01b      	b.n	8002918 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e0:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7ff f8e9 	bl	8001abc <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ec:	e00e      	b.n	800290c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ee:	f7ff f8e5 	bl	8001abc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d907      	bls.n	800290c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e15c      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
 8002900:	40023800 	.word	0x40023800
 8002904:	42470000 	.word	0x42470000
 8002908:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290c:	4b8a      	ldr	r3, [pc, #552]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800290e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1ea      	bne.n	80028ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8097 	beq.w	8002a54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292a:	4b83      	ldr	r3, [pc, #524]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	@ 0x40
 8002946:	4b7c      	ldr	r3, [pc, #496]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002952:	2301      	movs	r3, #1
 8002954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002956:	4b79      	ldr	r3, [pc, #484]	@ (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d118      	bne.n	8002994 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002962:	4b76      	ldr	r3, [pc, #472]	@ (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a75      	ldr	r2, [pc, #468]	@ (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296e:	f7ff f8a5 	bl	8001abc <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002976:	f7ff f8a1 	bl	8001abc <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e118      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	4b6c      	ldr	r3, [pc, #432]	@ (8002b3c <HAL_RCC_OscConfig+0x4b0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x31e>
 800299c:	4b66      	ldr	r3, [pc, #408]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a0:	4a65      	ldr	r2, [pc, #404]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a8:	e01c      	b.n	80029e4 <HAL_RCC_OscConfig+0x358>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x340>
 80029b2:	4b61      	ldr	r3, [pc, #388]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	4a60      	ldr	r2, [pc, #384]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029be:	4b5e      	ldr	r3, [pc, #376]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	4a5d      	ldr	r2, [pc, #372]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0x358>
 80029cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d0:	4a59      	ldr	r2, [pc, #356]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d8:	4b57      	ldr	r3, [pc, #348]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	4a56      	ldr	r2, [pc, #344]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d015      	beq.n	8002a18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7ff f866 	bl	8001abc <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7ff f862 	bl	8001abc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0d7      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ee      	beq.n	80029f4 <HAL_RCC_OscConfig+0x368>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7ff f850 	bl	8001abc <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7ff f84c 	bl	8001abc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0c1      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a36:	4b40      	ldr	r3, [pc, #256]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ee      	bne.n	8002a20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	4b3b      	ldr	r3, [pc, #236]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80ad 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a5e:	4b36      	ldr	r3, [pc, #216]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d060      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d145      	bne.n	8002afe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b33      	ldr	r3, [pc, #204]	@ (8002b40 <HAL_RCC_OscConfig+0x4b4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7ff f820 	bl	8001abc <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7ff f81c 	bl	8001abc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e093      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b29      	ldr	r3, [pc, #164]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	061b      	lsls	r3, r3, #24
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	071b      	lsls	r3, r3, #28
 8002aca:	491b      	ldr	r1, [pc, #108]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_RCC_OscConfig+0x4b4>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fff1 	bl	8001abc <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe ffed 	bl	8001abc <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e064      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af0:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x452>
 8002afc:	e05c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <HAL_RCC_OscConfig+0x4b4>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe ffda 	bl	8001abc <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe ffd6 	bl	8001abc <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04d      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x480>
 8002b2a:	e045      	b.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e040      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40007000 	.word	0x40007000
 8002b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b44:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc4 <HAL_RCC_OscConfig+0x538>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d030      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d129      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d122      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d119      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d10f      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800

08002bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07b      	b.n	8002cd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d108      	bne.n	8002bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bea:	d009      	beq.n	8002c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
 8002bf2:	e005      	b.n	8002c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fb74 	bl	8001308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c84:	ea42 0103 	orr.w	r1, r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 0104 	and.w	r1, r3, #4
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	f003 0210 	and.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10e      	bne.n	8002d1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
    return;
 8002d1a:	e0ce      	b.n	8002eba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_SPI_IRQHandler+0x5e>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4798      	blx	r3
    return;
 8002d38:	e0bf      	b.n	8002eba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <HAL_SPI_IRQHandler+0x7e>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80b0 	beq.w	8002eba <HAL_SPI_IRQHandler+0x1de>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80aa 	beq.w	8002eba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d023      	beq.n	8002db8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d011      	beq.n	8002da0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	e00b      	b.n	8002db8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
        return;
 8002db6:	e080      	b.n	8002eba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d014      	beq.n	8002dec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfa:	f043 0208 	orr.w	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d04f      	beq.n	8002eb8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <HAL_SPI_IRQHandler+0x168>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d034      	beq.n	8002eae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0203 	bic.w	r2, r2, #3
 8002e52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d011      	beq.n	8002e80 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e60:	4a17      	ldr	r2, [pc, #92]	@ (8002ec0 <HAL_SPI_IRQHandler+0x1e4>)
 8002e62:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe ff44 	bl	8001cf6 <HAL_DMA_Abort_IT>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d016      	beq.n	8002eb6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec0 <HAL_SPI_IRQHandler+0x1e4>)
 8002e8e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ff2e 	bl	8001cf6 <HAL_DMA_Abort_IT>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002eac:	e003      	b.n	8002eb6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f808 	bl	8002ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002eb4:	e000      	b.n	8002eb8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002eb6:	bf00      	nop
    return;
 8002eb8:	bf00      	nop
  }
}
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	08002ed9 	.word	0x08002ed9

08002ec4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff ffe6 	bl	8002ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e042      	b.n	8002f98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fa3e 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	@ 0x24
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f82b 	bl	8002fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa4:	b0c0      	sub	sp, #256	@ 0x100
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbc:	68d9      	ldr	r1, [r3, #12]
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	ea40 0301 	orr.w	r3, r0, r1
 8002fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ff8:	f021 010c 	bic.w	r1, r1, #12
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003006:	430b      	orrs	r3, r1
 8003008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301a:	6999      	ldr	r1, [r3, #24]
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	ea40 0301 	orr.w	r3, r0, r1
 8003026:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b8f      	ldr	r3, [pc, #572]	@ (800326c <UART_SetConfig+0x2cc>)
 8003030:	429a      	cmp	r2, r3
 8003032:	d005      	beq.n	8003040 <UART_SetConfig+0xa0>
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b8d      	ldr	r3, [pc, #564]	@ (8003270 <UART_SetConfig+0x2d0>)
 800303c:	429a      	cmp	r2, r3
 800303e:	d104      	bne.n	800304a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003040:	f7ff f966 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8003044:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003048:	e003      	b.n	8003052 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800304a:	f7ff f94d 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 800304e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800305c:	f040 810c 	bne.w	8003278 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003064:	2200      	movs	r2, #0
 8003066:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800306a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800306e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003072:	4622      	mov	r2, r4
 8003074:	462b      	mov	r3, r5
 8003076:	1891      	adds	r1, r2, r2
 8003078:	65b9      	str	r1, [r7, #88]	@ 0x58
 800307a:	415b      	adcs	r3, r3
 800307c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800307e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003082:	4621      	mov	r1, r4
 8003084:	eb12 0801 	adds.w	r8, r2, r1
 8003088:	4629      	mov	r1, r5
 800308a:	eb43 0901 	adc.w	r9, r3, r1
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800309a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800309e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030a2:	4690      	mov	r8, r2
 80030a4:	4699      	mov	r9, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	eb18 0303 	adds.w	r3, r8, r3
 80030ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030b0:	462b      	mov	r3, r5
 80030b2:	eb49 0303 	adc.w	r3, r9, r3
 80030b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030ce:	460b      	mov	r3, r1
 80030d0:	18db      	adds	r3, r3, r3
 80030d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80030d4:	4613      	mov	r3, r2
 80030d6:	eb42 0303 	adc.w	r3, r2, r3
 80030da:	657b      	str	r3, [r7, #84]	@ 0x54
 80030dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030e4:	f7fd f89c 	bl	8000220 <__aeabi_uldivmod>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4b61      	ldr	r3, [pc, #388]	@ (8003274 <UART_SetConfig+0x2d4>)
 80030ee:	fba3 2302 	umull	r2, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	011c      	lsls	r4, r3, #4
 80030f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003100:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003104:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003108:	4642      	mov	r2, r8
 800310a:	464b      	mov	r3, r9
 800310c:	1891      	adds	r1, r2, r2
 800310e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003110:	415b      	adcs	r3, r3
 8003112:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003118:	4641      	mov	r1, r8
 800311a:	eb12 0a01 	adds.w	sl, r2, r1
 800311e:	4649      	mov	r1, r9
 8003120:	eb43 0b01 	adc.w	fp, r3, r1
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003130:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003138:	4692      	mov	sl, r2
 800313a:	469b      	mov	fp, r3
 800313c:	4643      	mov	r3, r8
 800313e:	eb1a 0303 	adds.w	r3, sl, r3
 8003142:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003146:	464b      	mov	r3, r9
 8003148:	eb4b 0303 	adc.w	r3, fp, r3
 800314c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800315c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003160:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003164:	460b      	mov	r3, r1
 8003166:	18db      	adds	r3, r3, r3
 8003168:	643b      	str	r3, [r7, #64]	@ 0x40
 800316a:	4613      	mov	r3, r2
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	647b      	str	r3, [r7, #68]	@ 0x44
 8003172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003176:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800317a:	f7fd f851 	bl	8000220 <__aeabi_uldivmod>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4611      	mov	r1, r2
 8003184:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <UART_SetConfig+0x2d4>)
 8003186:	fba3 2301 	umull	r2, r3, r3, r1
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2264      	movs	r2, #100	@ 0x64
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	1acb      	subs	r3, r1, r3
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800319a:	4b36      	ldr	r3, [pc, #216]	@ (8003274 <UART_SetConfig+0x2d4>)
 800319c:	fba3 2302 	umull	r2, r3, r3, r2
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031a8:	441c      	add	r4, r3
 80031aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	1891      	adds	r1, r2, r2
 80031c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031c4:	415b      	adcs	r3, r3
 80031c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031cc:	4641      	mov	r1, r8
 80031ce:	1851      	adds	r1, r2, r1
 80031d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80031d2:	4649      	mov	r1, r9
 80031d4:	414b      	adcs	r3, r1
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031e4:	4659      	mov	r1, fp
 80031e6:	00cb      	lsls	r3, r1, #3
 80031e8:	4651      	mov	r1, sl
 80031ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ee:	4651      	mov	r1, sl
 80031f0:	00ca      	lsls	r2, r1, #3
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	4642      	mov	r2, r8
 80031fa:	189b      	adds	r3, r3, r2
 80031fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003200:	464b      	mov	r3, r9
 8003202:	460a      	mov	r2, r1
 8003204:	eb42 0303 	adc.w	r3, r2, r3
 8003208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003218:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800321c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003220:	460b      	mov	r3, r1
 8003222:	18db      	adds	r3, r3, r3
 8003224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003226:	4613      	mov	r3, r2
 8003228:	eb42 0303 	adc.w	r3, r2, r3
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800322e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003236:	f7fc fff3 	bl	8000220 <__aeabi_uldivmod>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <UART_SetConfig+0x2d4>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	2164      	movs	r1, #100	@ 0x64
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	3332      	adds	r3, #50	@ 0x32
 8003252:	4a08      	ldr	r2, [pc, #32]	@ (8003274 <UART_SetConfig+0x2d4>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	f003 0207 	and.w	r2, r3, #7
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4422      	add	r2, r4
 8003266:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003268:	e106      	b.n	8003478 <UART_SetConfig+0x4d8>
 800326a:	bf00      	nop
 800326c:	40011000 	.word	0x40011000
 8003270:	40011400 	.word	0x40011400
 8003274:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327c:	2200      	movs	r2, #0
 800327e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003282:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003286:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800328a:	4642      	mov	r2, r8
 800328c:	464b      	mov	r3, r9
 800328e:	1891      	adds	r1, r2, r2
 8003290:	6239      	str	r1, [r7, #32]
 8003292:	415b      	adcs	r3, r3
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
 8003296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800329a:	4641      	mov	r1, r8
 800329c:	1854      	adds	r4, r2, r1
 800329e:	4649      	mov	r1, r9
 80032a0:	eb43 0501 	adc.w	r5, r3, r1
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	00eb      	lsls	r3, r5, #3
 80032ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032b2:	00e2      	lsls	r2, r4, #3
 80032b4:	4614      	mov	r4, r2
 80032b6:	461d      	mov	r5, r3
 80032b8:	4643      	mov	r3, r8
 80032ba:	18e3      	adds	r3, r4, r3
 80032bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032c0:	464b      	mov	r3, r9
 80032c2:	eb45 0303 	adc.w	r3, r5, r3
 80032c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032e6:	4629      	mov	r1, r5
 80032e8:	008b      	lsls	r3, r1, #2
 80032ea:	4621      	mov	r1, r4
 80032ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f0:	4621      	mov	r1, r4
 80032f2:	008a      	lsls	r2, r1, #2
 80032f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032f8:	f7fc ff92 	bl	8000220 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4b60      	ldr	r3, [pc, #384]	@ (8003484 <UART_SetConfig+0x4e4>)
 8003302:	fba3 2302 	umull	r2, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	011c      	lsls	r4, r3, #4
 800330a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003314:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003318:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800331c:	4642      	mov	r2, r8
 800331e:	464b      	mov	r3, r9
 8003320:	1891      	adds	r1, r2, r2
 8003322:	61b9      	str	r1, [r7, #24]
 8003324:	415b      	adcs	r3, r3
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800332c:	4641      	mov	r1, r8
 800332e:	1851      	adds	r1, r2, r1
 8003330:	6139      	str	r1, [r7, #16]
 8003332:	4649      	mov	r1, r9
 8003334:	414b      	adcs	r3, r1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003344:	4659      	mov	r1, fp
 8003346:	00cb      	lsls	r3, r1, #3
 8003348:	4651      	mov	r1, sl
 800334a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334e:	4651      	mov	r1, sl
 8003350:	00ca      	lsls	r2, r1, #3
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	4603      	mov	r3, r0
 8003358:	4642      	mov	r2, r8
 800335a:	189b      	adds	r3, r3, r2
 800335c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003360:	464b      	mov	r3, r9
 8003362:	460a      	mov	r2, r1
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003376:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003384:	4649      	mov	r1, r9
 8003386:	008b      	lsls	r3, r1, #2
 8003388:	4641      	mov	r1, r8
 800338a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800338e:	4641      	mov	r1, r8
 8003390:	008a      	lsls	r2, r1, #2
 8003392:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003396:	f7fc ff43 	bl	8000220 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	4b38      	ldr	r3, [pc, #224]	@ (8003484 <UART_SetConfig+0x4e4>)
 80033a2:	fba3 2301 	umull	r2, r3, r3, r1
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2264      	movs	r2, #100	@ 0x64
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	1acb      	subs	r3, r1, r3
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	3332      	adds	r3, #50	@ 0x32
 80033b4:	4a33      	ldr	r2, [pc, #204]	@ (8003484 <UART_SetConfig+0x4e4>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033c0:	441c      	add	r4, r3
 80033c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c6:	2200      	movs	r2, #0
 80033c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80033ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80033cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033d0:	4642      	mov	r2, r8
 80033d2:	464b      	mov	r3, r9
 80033d4:	1891      	adds	r1, r2, r2
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	415b      	adcs	r3, r3
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e0:	4641      	mov	r1, r8
 80033e2:	1851      	adds	r1, r2, r1
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	4649      	mov	r1, r9
 80033e8:	414b      	adcs	r3, r1
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033f8:	4659      	mov	r1, fp
 80033fa:	00cb      	lsls	r3, r1, #3
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003402:	4651      	mov	r1, sl
 8003404:	00ca      	lsls	r2, r1, #3
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	4603      	mov	r3, r0
 800340c:	4642      	mov	r2, r8
 800340e:	189b      	adds	r3, r3, r2
 8003410:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003412:	464b      	mov	r3, r9
 8003414:	460a      	mov	r2, r1
 8003416:	eb42 0303 	adc.w	r3, r2, r3
 800341a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	663b      	str	r3, [r7, #96]	@ 0x60
 8003426:	667a      	str	r2, [r7, #100]	@ 0x64
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003434:	4649      	mov	r1, r9
 8003436:	008b      	lsls	r3, r1, #2
 8003438:	4641      	mov	r1, r8
 800343a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800343e:	4641      	mov	r1, r8
 8003440:	008a      	lsls	r2, r1, #2
 8003442:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003446:	f7fc feeb 	bl	8000220 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <UART_SetConfig+0x4e4>)
 8003450:	fba3 1302 	umull	r1, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	2164      	movs	r1, #100	@ 0x64
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	3332      	adds	r3, #50	@ 0x32
 8003462:	4a08      	ldr	r2, [pc, #32]	@ (8003484 <UART_SetConfig+0x4e4>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	f003 020f 	and.w	r2, r3, #15
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4422      	add	r2, r4
 8003476:	609a      	str	r2, [r3, #8]
}
 8003478:	bf00      	nop
 800347a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800347e:	46bd      	mov	sp, r7
 8003480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003484:	51eb851f 	.word	0x51eb851f

08003488 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800349a:	2b84      	cmp	r3, #132	@ 0x84
 800349c:	d005      	beq.n	80034aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800349e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	3303      	adds	r3, #3
 80034a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80034aa:	68fb      	ldr	r3, [r7, #12]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034be:	f3ef 8305 	mrs	r3, IPSR
 80034c2:	607b      	str	r3, [r7, #4]
  return(result);
 80034c4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034e0:	f001 fa86 	bl	80049f0 <vTaskStartScheduler>
  
  return osOK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	bd80      	pop	{r7, pc}

080034ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ec:	b089      	sub	sp, #36	@ 0x24
 80034ee:	af04      	add	r7, sp, #16
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <osThreadCreate+0x54>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01c      	beq.n	800353e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685c      	ldr	r4, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691e      	ldr	r6, [r3, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ffb6 	bl	8003488 <makeFreeRtosPriority>
 800351c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003526:	9202      	str	r2, [sp, #8]
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	9100      	str	r1, [sp, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4632      	mov	r2, r6
 8003530:	4629      	mov	r1, r5
 8003532:	4620      	mov	r0, r4
 8003534:	f001 f88e 	bl	8004654 <xTaskCreateStatic>
 8003538:	4603      	mov	r3, r0
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e01c      	b.n	8003578 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685c      	ldr	r4, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800354a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff98 	bl	8003488 <makeFreeRtosPriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f107 030c 	add.w	r3, r7, #12
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	9200      	str	r2, [sp, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	4632      	mov	r2, r6
 8003566:	4629      	mov	r1, r5
 8003568:	4620      	mov	r0, r4
 800356a:	f001 f8d3 	bl	8004714 <xTaskCreate>
 800356e:	4603      	mov	r3, r0
 8003570:	2b01      	cmp	r3, #1
 8003572:	d001      	beq.n	8003578 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003578:	68fb      	ldr	r3, [r7, #12]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003582 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8003586:	f001 fe3d 	bl	8005204 <xTaskGetCurrentTaskHandle>
 800358a:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}

08003590 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <osDelay+0x16>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	e000      	b.n	80035a8 <osDelay+0x18>
 80035a6:	2301      	movs	r3, #1
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 f9eb 	bl	8004984 <vTaskDelay>
  
  return osOK;
 80035ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80035ca:	f7ff ff75 	bl	80034b8 <inHandlerMode>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01c      	beq.n	800360e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	f107 0208 	add.w	r2, r7, #8
 80035da:	f107 030c 	add.w	r3, r7, #12
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	2201      	movs	r2, #1
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f001 ffd5 	bl	8005594 <xTaskGenericNotifyFromISR>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d002      	beq.n	80035f6 <osSignalSet+0x3e>
      return 0x80000000;
 80035f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80035f4:	e019      	b.n	800362a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <osSignalSet+0x70>
 80035fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003634 <osSignalSet+0x7c>)
 80035fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	e00c      	b.n	8003628 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800360e:	6839      	ldr	r1, [r7, #0]
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	2201      	movs	r2, #1
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f001 ff04 	bl	8005424 <xTaskGenericNotify>
 800361c:	4603      	mov	r3, r0
 800361e:	2b01      	cmp	r3, #1
 8003620:	d002      	beq.n	8003628 <osSignalSet+0x70>
    return 0x80000000;
 8003622:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003626:	e000      	b.n	800362a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003628:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	e000ed04 	.word	0xe000ed04

08003638 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b089      	sub	sp, #36	@ 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d103      	bne.n	800365c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e009      	b.n	8003670 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d006      	beq.n	8003670 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <osSignalWait+0x38>
      ticks = 1;
 800366c:	2301      	movs	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8003670:	f7ff ff22 	bl	80034b8 <inHandlerMode>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800367a:	2382      	movs	r3, #130	@ 0x82
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	e01b      	b.n	80036b8 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	f107 0310 	add.w	r3, r7, #16
 8003686:	1d1a      	adds	r2, r3, #4
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2000      	movs	r0, #0
 800368c:	f001 fe70 	bl	8005370 <xTaskNotifyWait>
 8003690:	4603      	mov	r3, r0
 8003692:	2b01      	cmp	r3, #1
 8003694:	d008      	beq.n	80036a8 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <osSignalWait+0x6a>
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	e00a      	b.n	80036b8 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80036a2:	2340      	movs	r3, #64	@ 0x40
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	e007      	b.n	80036b8 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da02      	bge.n	80036b4 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80036ae:	2386      	movs	r3, #134	@ 0x86
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	e001      	b.n	80036b8 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80036b4:	2308      	movs	r3, #8
 80036b6:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	461c      	mov	r4, r3
 80036bc:	f107 0310 	add.w	r3, r7, #16
 80036c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	3724      	adds	r7, #36	@ 0x24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}

080036d0 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	3303      	adds	r3, #3
 80036de:	f023 0303 	bic.w	r3, r3, #3
 80036e2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80036e4:	2014      	movs	r0, #20
 80036e6:	f002 fae9 	bl	8005cbc <pvPortMalloc>
 80036ea:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d046      	beq.n	8003780 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f002 fad6 	bl	8005cbc <pvPortMalloc>
 8003710:	4602      	mov	r2, r0
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02b      	beq.n	8003776 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	fb02 f303 	mul.w	r3, r2, r3
 8003728:	4618      	mov	r0, r3
 800372a:	f002 fac7 	bl	8005cbc <pvPortMalloc>
 800372e:	4602      	mov	r2, r0
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d011      	beq.n	8003760 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	e008      	b.n	8003754 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	3301      	adds	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3f1      	bcc.n	8003742 <osPoolCreate+0x72>
 800375e:	e00f      	b.n	8003780 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	f002 fb77 	bl	8005e58 <vPortFree>
        vPortFree(thePool);
 800376a:	6978      	ldr	r0, [r7, #20]
 800376c:	f002 fb74 	bl	8005e58 <vPortFree>
        thePool = NULL;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e004      	b.n	8003780 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8003776:	6978      	ldr	r0, [r7, #20]
 8003778:	f002 fb6e 	bl	8005e58 <vPortFree>
      thePool = NULL;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8003780:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b08a      	sub	sp, #40	@ 0x28
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800379a:	f7ff fe8d 	bl	80034b8 <inHandlerMode>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037a4:	f3ef 8211 	mrs	r2, BASEPRI
 80037a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	617a      	str	r2, [r7, #20]
 80037ba:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037bc:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c0:	e001      	b.n	80037c6 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 80037c2:	f002 f959 	bl	8005a78 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e029      	b.n	8003820 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6892      	ldr	r2, [r2, #8]
 80037d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80037dc:	fb01 f202 	mul.w	r2, r1, r2
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d113      	bne.n	800381a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4413      	add	r3, r2
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4619      	mov	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	440b      	add	r3, r1
 8003810:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	611a      	str	r2, [r3, #16]
      break;
 8003818:	e007      	b.n	800382a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3301      	adds	r3, #1
 800381e:	61fb      	str	r3, [r7, #28]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	429a      	cmp	r2, r3
 8003828:	d3d0      	bcc.n	80037cc <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800382a:	f7ff fe45 	bl	80034b8 <inHandlerMode>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800383e:	e001      	b.n	8003844 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003840:	f002 f94c 	bl	8005adc <vPortExitCritical>
  }
  
  return p;
 8003844:	6a3b      	ldr	r3, [r7, #32]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3728      	adds	r7, #40	@ 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800384e:	b480      	push	{r7}
 8003850:	b085      	sub	sp, #20
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <osPoolFree+0x14>
    return osErrorParameter;
 800385e:	2380      	movs	r3, #128	@ 0x80
 8003860:	e030      	b.n	80038c4 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <osPoolFree+0x1e>
    return osErrorParameter;
 8003868:	2380      	movs	r3, #128	@ 0x80
 800386a:	e02b      	b.n	80038c4 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d201      	bcs.n	800387a <osPoolFree+0x2c>
    return osErrorParameter;
 8003876:	2380      	movs	r3, #128	@ 0x80
 8003878:	e024      	b.n	80038c4 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	fbb3 f1f2 	udiv	r1, r3, r2
 800388e:	fb01 f202 	mul.w	r2, r1, r2
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <osPoolFree+0x4e>
    return osErrorParameter;
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	e013      	b.n	80038c4 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d301      	bcc.n	80038b6 <osPoolFree+0x68>
    return osErrorParameter;
 80038b2:	2380      	movs	r3, #128	@ 0x80
 80038b4:	e006      	b.n	80038c4 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689c      	ldr	r4, [r3, #8]
 80038ee:	200c      	movs	r0, #12
 80038f0:	f002 f9e4 	bl	8005cbc <pvPortMalloc>
 80038f4:	4603      	mov	r3, r0
 80038f6:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <osMailCreate+0x36>
    return NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	e038      	b.n	8003978 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	681c      	ldr	r4, [r3, #0]
 800391a:	2200      	movs	r2, #0
 800391c:	2104      	movs	r1, #4
 800391e:	f000 fa2b 	bl	8003d78 <xQueueGenericCreate>
 8003922:	4603      	mov	r3, r0
 8003924:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d107      	bne.n	8003942 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f002 fa8d 	bl	8005e58 <vPortFree>
    return NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	e01a      	b.n	8003978 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	681c      	ldr	r4, [r3, #0]
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff febf 	bl	80036d0 <osPoolCreate>
 8003952:	4603      	mov	r3, r0
 8003954:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d107      	bne.n	8003972 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f002 fa75 	bl	8005e58 <vPortFree>
    return NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	e002      	b.n	8003978 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8003978:	4618      	mov	r0, r3
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <osMailAlloc+0x14>
    return NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	e006      	b.n	80039a2 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fef6 	bl	800378a <osPoolAlloc>
 800399e:	60f8      	str	r0, [r7, #12]
  
  return p;
 80039a0:	68fb      	ldr	r3, [r7, #12]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <osMailPut+0x14>
    return osErrorParameter;
 80039bc:	2380      	movs	r3, #128	@ 0x80
 80039be:	e02c      	b.n	8003a1a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 80039c4:	f7ff fd78 	bl	80034b8 <inHandlerMode>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6858      	ldr	r0, [r3, #4]
 80039d2:	f107 020c 	add.w	r2, r7, #12
 80039d6:	4639      	mov	r1, r7
 80039d8:	2300      	movs	r3, #0
 80039da:	f000 fb29 	bl	8004030 <xQueueGenericSendFromISR>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d001      	beq.n	80039e8 <osMailPut+0x3c>
      return osErrorOS;
 80039e4:	23ff      	movs	r3, #255	@ 0xff
 80039e6:	e018      	b.n	8003a1a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d014      	beq.n	8003a18 <osMailPut+0x6c>
 80039ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <osMailPut+0x78>)
 80039f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	e00b      	b.n	8003a18 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6858      	ldr	r0, [r3, #4]
 8003a04:	4639      	mov	r1, r7
 8003a06:	2300      	movs	r3, #0
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f000 fa0f 	bl	8003e2c <xQueueGenericSend>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <osMailPut+0x6c>
      return osErrorOS;
 8003a14:	23ff      	movs	r3, #255	@ 0xff
 8003a16:	e000      	b.n	8003a1a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8003a28:	b590      	push	{r4, r7, lr}
 8003a2a:	b08b      	sub	sp, #44	@ 0x2c
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8003a3e:	2380      	movs	r3, #128	@ 0x80
 8003a40:	617b      	str	r3, [r7, #20]
    return event;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	461c      	mov	r4, r3
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a52:	e056      	b.n	8003b02 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d103      	bne.n	8003a6c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a6a:	e009      	b.n	8003a80 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d006      	beq.n	8003a80 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <osMailGet+0x58>
      ticks = 1;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003a80:	f7ff fd1a 	bl	80034b8 <inHandlerMode>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01d      	beq.n	8003ac6 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6858      	ldr	r0, [r3, #4]
 8003a8e:	f107 0220 	add.w	r2, r7, #32
 8003a92:	f107 0314 	add.w	r3, r7, #20
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f000 fc49 	bl	8004330 <xQueueReceiveFromISR>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d102      	bne.n	8003aaa <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8003aa4:	2320      	movs	r3, #32
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e001      	b.n	8003aae <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01e      	beq.n	8003af2 <osMailGet+0xca>
 8003ab4:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <osMailGet+0xe4>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	e015      	b.n	8003af2 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	6858      	ldr	r0, [r3, #4]
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	3304      	adds	r3, #4
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f000 fb4a 	bl	800416c <xQueueReceive>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d102      	bne.n	8003ae4 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8003ade:	2320      	movs	r3, #32
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e006      	b.n	8003af2 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <osMailGet+0xc6>
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <osMailGet+0xc8>
 8003aee:	2340      	movs	r3, #64	@ 0x40
 8003af0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	461c      	mov	r4, r3
 8003af6:	f107 0314 	add.w	r3, r7, #20
 8003afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	372c      	adds	r7, #44	@ 0x2c
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd90      	pop	{r4, r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <osMailFree+0x14>
    return osErrorParameter;
 8003b20:	2380      	movs	r3, #128	@ 0x80
 8003b22:	e006      	b.n	8003b32 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	6839      	ldr	r1, [r7, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fe8f 	bl	800384e <osPoolFree>
 8003b30:	4603      	mov	r3, r0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f103 0208 	add.w	r2, r3, #8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f103 0208 	add.w	r2, r3, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f103 0208 	add.w	r2, r3, #8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d103      	bne.n	8003bfc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	e00c      	b.n	8003c16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3308      	adds	r3, #8
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e002      	b.n	8003c0a <vListInsert+0x2e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d2f6      	bcs.n	8003c04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	601a      	str	r2, [r3, #0]
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6892      	ldr	r2, [r2, #8]
 8003c64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6852      	ldr	r2, [r2, #4]
 8003c6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d103      	bne.n	8003c82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	1e5a      	subs	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <xQueueGenericReset+0x2c>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	60bb      	str	r3, [r7, #8]
}
 8003cca:	bf00      	nop
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cd0:	f001 fed2 	bl	8005a78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	441a      	add	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d00:	3b01      	subs	r3, #1
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	441a      	add	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	22ff      	movs	r2, #255	@ 0xff
 8003d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	22ff      	movs	r2, #255	@ 0xff
 8003d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d114      	bne.n	8003d50 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01a      	beq.n	8003d64 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3310      	adds	r3, #16
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 f8a6 	bl	8004e84 <xTaskRemoveFromEventList>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d012      	beq.n	8003d64 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <xQueueGenericReset+0xd0>)
 8003d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	e009      	b.n	8003d64 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3310      	adds	r3, #16
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fef0 	bl	8003b3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3324      	adds	r3, #36	@ 0x24
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff feeb 	bl	8003b3a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d64:	f001 feba 	bl	8005adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d68:	2301      	movs	r3, #1
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000ed04 	.word	0xe000ed04

08003d78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	@ 0x28
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	613b      	str	r3, [r7, #16]
}
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
 8003da2:	e7fd      	b.n	8003da0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3348      	adds	r3, #72	@ 0x48
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 ff82 	bl	8005cbc <pvPortMalloc>
 8003db8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d011      	beq.n	8003de4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	3348      	adds	r3, #72	@ 0x48
 8003dc8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dd2:	79fa      	ldrb	r2, [r7, #7]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f805 	bl	8003dee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003de4:	69bb      	ldr	r3, [r7, #24]
	}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e002      	b.n	8003e10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	69b8      	ldr	r0, [r7, #24]
 8003e20:	f7ff ff40 	bl	8003ca4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08e      	sub	sp, #56	@ 0x38
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <xQueueGenericSend+0x34>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <xQueueGenericSend+0x42>
 8003e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <xQueueGenericSend+0x46>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <xQueueGenericSend+0x48>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <xQueueGenericSend+0x64>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	e7fd      	b.n	8003e8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d103      	bne.n	8003e9e <xQueueGenericSend+0x72>
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <xQueueGenericSend+0x76>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <xQueueGenericSend+0x78>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10b      	bne.n	8003ec0 <xQueueGenericSend+0x94>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	623b      	str	r3, [r7, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ec0:	f001 f9b0 	bl	8005224 <xTaskGetSchedulerState>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <xQueueGenericSend+0xa4>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <xQueueGenericSend+0xa8>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <xQueueGenericSend+0xaa>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	61fb      	str	r3, [r7, #28]
}
 8003eec:	bf00      	nop
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ef2:	f001 fdc1 	bl	8005a78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <xQueueGenericSend+0xdc>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d129      	bne.n	8003f5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f0e:	f000 fa91 	bl	8004434 <prvCopyDataToQueue>
 8003f12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	3324      	adds	r3, #36	@ 0x24
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 ffaf 	bl	8004e84 <xTaskRemoveFromEventList>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d013      	beq.n	8003f54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800402c <xQueueGenericSend+0x200>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	e00a      	b.n	8003f54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f44:	4b39      	ldr	r3, [pc, #228]	@ (800402c <xQueueGenericSend+0x200>)
 8003f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f54:	f001 fdc2 	bl	8005adc <vPortExitCritical>
				return pdPASS;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e063      	b.n	8004024 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d103      	bne.n	8003f6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f62:	f001 fdbb 	bl	8005adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e05c      	b.n	8004024 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d106      	bne.n	8003f7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f70:	f107 0314 	add.w	r3, r7, #20
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 ffe9 	bl	8004f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f7e:	f001 fdad 	bl	8005adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f82:	f000 fd97 	bl	8004ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f86:	f001 fd77 	bl	8005a78 <vPortEnterCritical>
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d103      	bne.n	8003fa0 <xQueueGenericSend+0x174>
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d103      	bne.n	8003fb6 <xQueueGenericSend+0x18a>
 8003fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fb6:	f001 fd91 	bl	8005adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fba:	1d3a      	adds	r2, r7, #4
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 ffd8 	bl	8004f78 <xTaskCheckForTimeOut>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d124      	bne.n	8004018 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fd0:	f000 fb28 	bl	8004624 <prvIsQueueFull>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d018      	beq.n	800400c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	3310      	adds	r3, #16
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 ff28 	bl	8004e38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fea:	f000 fab3 	bl	8004554 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fee:	f000 fd6f 	bl	8004ad0 <xTaskResumeAll>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f47f af7c 	bne.w	8003ef2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <xQueueGenericSend+0x200>)
 8003ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	e772      	b.n	8003ef2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800400c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800400e:	f000 faa1 	bl	8004554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004012:	f000 fd5d 	bl	8004ad0 <xTaskResumeAll>
 8004016:	e76c      	b.n	8003ef2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004018:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800401a:	f000 fa9b 	bl	8004554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800401e:	f000 fd57 	bl	8004ad0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004022:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004024:	4618      	mov	r0, r3
 8004026:	3738      	adds	r7, #56	@ 0x38
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	e000ed04 	.word	0xe000ed04

08004030 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b090      	sub	sp, #64	@ 0x40
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	e7fd      	b.n	800405c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <xQueueGenericSendFromISR+0x3e>
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <xQueueGenericSendFromISR+0x42>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <xQueueGenericSendFromISR+0x44>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d103      	bne.n	800409e <xQueueGenericSendFromISR+0x6e>
 8004096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <xQueueGenericSendFromISR+0x72>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <xQueueGenericSendFromISR+0x74>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	623b      	str	r3, [r7, #32]
}
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040c0:	f001 fdba 	bl	8005c38 <vPortValidateInterruptPriority>
	__asm volatile
 80040c4:	f3ef 8211 	mrs	r2, BASEPRI
 80040c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	61fa      	str	r2, [r7, #28]
 80040da:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80040dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d302      	bcc.n	80040f2 <xQueueGenericSendFromISR+0xc2>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d12f      	bne.n	8004152 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004108:	f000 f994 	bl	8004434 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800410c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d112      	bne.n	800413c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800411e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004120:	3324      	adds	r3, #36	@ 0x24
 8004122:	4618      	mov	r0, r3
 8004124:	f000 feae 	bl	8004e84 <xTaskRemoveFromEventList>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00e      	beq.n	800414c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e007      	b.n	800414c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800413c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004140:	3301      	adds	r3, #1
 8004142:	b2db      	uxtb	r3, r3
 8004144:	b25a      	sxtb	r2, r3
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800414c:	2301      	movs	r3, #1
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004150:	e001      	b.n	8004156 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004152:	2300      	movs	r3, #0
 8004154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004158:	617b      	str	r3, [r7, #20]
	__asm volatile
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f383 8811 	msr	BASEPRI, r3
}
 8004160:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004164:	4618      	mov	r0, r3
 8004166:	3740      	adds	r7, #64	@ 0x40
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08c      	sub	sp, #48	@ 0x30
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <xQueueReceive+0x32>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	623b      	str	r3, [r7, #32]
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	e7fd      	b.n	800419a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <xQueueReceive+0x40>
 80041a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <xQueueReceive+0x44>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <xQueueReceive+0x46>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10b      	bne.n	80041ce <xQueueReceive+0x62>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	61fb      	str	r3, [r7, #28]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ce:	f001 f829 	bl	8005224 <xTaskGetSchedulerState>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <xQueueReceive+0x72>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <xQueueReceive+0x76>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <xQueueReceive+0x78>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <xQueueReceive+0x94>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	61bb      	str	r3, [r7, #24]
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004200:	f001 fc3a 	bl	8005a78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01f      	beq.n	8004250 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004214:	f000 f978 	bl	8004508 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	1e5a      	subs	r2, r3, #1
 800421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00f      	beq.n	8004248 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422a:	3310      	adds	r3, #16
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fe29 	bl	8004e84 <xTaskRemoveFromEventList>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004238:	4b3c      	ldr	r3, [pc, #240]	@ (800432c <xQueueReceive+0x1c0>)
 800423a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004248:	f001 fc48 	bl	8005adc <vPortExitCritical>
				return pdPASS;
 800424c:	2301      	movs	r3, #1
 800424e:	e069      	b.n	8004324 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004256:	f001 fc41 	bl	8005adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800425a:	2300      	movs	r3, #0
 800425c:	e062      	b.n	8004324 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004264:	f107 0310 	add.w	r3, r7, #16
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fe6f 	bl	8004f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800426e:	2301      	movs	r3, #1
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004272:	f001 fc33 	bl	8005adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004276:	f000 fc1d 	bl	8004ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800427a:	f001 fbfd 	bl	8005a78 <vPortEnterCritical>
 800427e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004284:	b25b      	sxtb	r3, r3
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d103      	bne.n	8004294 <xQueueReceive+0x128>
 800428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800429a:	b25b      	sxtb	r3, r3
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d103      	bne.n	80042aa <xQueueReceive+0x13e>
 80042a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042aa:	f001 fc17 	bl	8005adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ae:	1d3a      	adds	r2, r7, #4
 80042b0:	f107 0310 	add.w	r3, r7, #16
 80042b4:	4611      	mov	r1, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fe5e 	bl	8004f78 <xTaskCheckForTimeOut>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d123      	bne.n	800430a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042c4:	f000 f998 	bl	80045f8 <prvIsQueueEmpty>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d017      	beq.n	80042fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	3324      	adds	r3, #36	@ 0x24
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fdae 	bl	8004e38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042de:	f000 f939 	bl	8004554 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042e2:	f000 fbf5 	bl	8004ad0 <xTaskResumeAll>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d189      	bne.n	8004200 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80042ec:	4b0f      	ldr	r3, [pc, #60]	@ (800432c <xQueueReceive+0x1c0>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	e780      	b.n	8004200 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004300:	f000 f928 	bl	8004554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004304:	f000 fbe4 	bl	8004ad0 <xTaskResumeAll>
 8004308:	e77a      	b.n	8004200 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800430a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800430c:	f000 f922 	bl	8004554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004310:	f000 fbde 	bl	8004ad0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004314:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004316:	f000 f96f 	bl	80045f8 <prvIsQueueEmpty>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	f43f af6f 	beq.w	8004200 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004322:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004324:	4618      	mov	r0, r3
 8004326:	3730      	adds	r7, #48	@ 0x30
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08e      	sub	sp, #56	@ 0x38
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	623b      	str	r3, [r7, #32]
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	e7fd      	b.n	800435a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d103      	bne.n	800436c <xQueueReceiveFromISR+0x3c>
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <xQueueReceiveFromISR+0x40>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <xQueueReceiveFromISR+0x42>
 8004370:	2300      	movs	r3, #0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	61fb      	str	r3, [r7, #28]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800438e:	f001 fc53 	bl	8005c38 <vPortValidateInterruptPriority>
	__asm volatile
 8004392:	f3ef 8211 	mrs	r2, BASEPRI
 8004396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	61ba      	str	r2, [r7, #24]
 80043a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80043aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d02f      	beq.n	800441a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043c8:	f000 f89e 	bl	8004508 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	1e5a      	subs	r2, r3, #1
 80043d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80043d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d112      	bne.n	8004404 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d016      	beq.n	8004414 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	3310      	adds	r3, #16
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fd4a 	bl	8004e84 <xTaskRemoveFromEventList>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00e      	beq.n	8004414 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e007      	b.n	8004414 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004408:	3301      	adds	r3, #1
 800440a:	b2db      	uxtb	r3, r3
 800440c:	b25a      	sxtb	r2, r3
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004414:	2301      	movs	r3, #1
 8004416:	637b      	str	r3, [r7, #52]	@ 0x34
 8004418:	e001      	b.n	800441e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800441a:	2300      	movs	r3, #0
 800441c:	637b      	str	r3, [r7, #52]	@ 0x34
 800441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004420:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f383 8811 	msr	BASEPRI, r3
}
 8004428:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800442a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800442c:	4618      	mov	r0, r3
 800442e:	3738      	adds	r7, #56	@ 0x38
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10d      	bne.n	800446e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d14d      	bne.n	80044f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fefe 	bl	8005260 <xTaskPriorityDisinherit>
 8004464:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	e043      	b.n	80044f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d119      	bne.n	80044a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6858      	ldr	r0, [r3, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	461a      	mov	r2, r3
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	f001 fe54 	bl	800612c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	441a      	add	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	429a      	cmp	r2, r3
 800449c:	d32b      	bcc.n	80044f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	e026      	b.n	80044f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68d8      	ldr	r0, [r3, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	461a      	mov	r2, r3
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	f001 fe3a 	bl	800612c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c0:	425b      	negs	r3, r3
 80044c2:	441a      	add	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d207      	bcs.n	80044e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	425b      	negs	r3, r3
 80044de:	441a      	add	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d105      	bne.n	80044f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80044fe:	697b      	ldr	r3, [r7, #20]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d018      	beq.n	800454c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	441a      	add	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d303      	bcc.n	800453c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68d9      	ldr	r1, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	461a      	mov	r2, r3
 8004546:	6838      	ldr	r0, [r7, #0]
 8004548:	f001 fdf0 	bl	800612c <memcpy>
	}
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800455c:	f001 fa8c 	bl	8005a78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004566:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004568:	e011      	b.n	800458e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d012      	beq.n	8004598 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3324      	adds	r3, #36	@ 0x24
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fc84 	bl	8004e84 <xTaskRemoveFromEventList>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004582:	f000 fd5d 	bl	8005040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	3b01      	subs	r3, #1
 800458a:	b2db      	uxtb	r3, r3
 800458c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800458e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	dce9      	bgt.n	800456a <prvUnlockQueue+0x16>
 8004596:	e000      	b.n	800459a <prvUnlockQueue+0x46>
					break;
 8004598:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	22ff      	movs	r2, #255	@ 0xff
 800459e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80045a2:	f001 fa9b 	bl	8005adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045a6:	f001 fa67 	bl	8005a78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045b2:	e011      	b.n	80045d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d012      	beq.n	80045e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3310      	adds	r3, #16
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fc5f 	bl	8004e84 <xTaskRemoveFromEventList>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045cc:	f000 fd38 	bl	8005040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045d0:	7bbb      	ldrb	r3, [r7, #14]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dce9      	bgt.n	80045b4 <prvUnlockQueue+0x60>
 80045e0:	e000      	b.n	80045e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	22ff      	movs	r2, #255	@ 0xff
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80045ec:	f001 fa76 	bl	8005adc <vPortExitCritical>
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004600:	f001 fa3a 	bl	8005a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e001      	b.n	8004616 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004616:	f001 fa61 	bl	8005adc <vPortExitCritical>

	return xReturn;
 800461a:	68fb      	ldr	r3, [r7, #12]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800462c:	f001 fa24 	bl	8005a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004638:	429a      	cmp	r2, r3
 800463a:	d102      	bne.n	8004642 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e001      	b.n	8004646 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004646:	f001 fa49 	bl	8005adc <vPortExitCritical>

	return xReturn;
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08e      	sub	sp, #56	@ 0x38
 8004658:	af04      	add	r7, sp, #16
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	623b      	str	r3, [r7, #32]
}
 800467a:	bf00      	nop
 800467c:	bf00      	nop
 800467e:	e7fd      	b.n	800467c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	61fb      	str	r3, [r7, #28]
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	e7fd      	b.n	800469a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800469e:	2354      	movs	r3, #84	@ 0x54
 80046a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b54      	cmp	r3, #84	@ 0x54
 80046a6:	d00b      	beq.n	80046c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	61bb      	str	r3, [r7, #24]
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01e      	beq.n	8004706 <xTaskCreateStatic+0xb2>
 80046c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01b      	beq.n	8004706 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046e0:	2300      	movs	r3, #0
 80046e2:	9303      	str	r3, [sp, #12]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	9302      	str	r3, [sp, #8]
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f850 	bl	800479e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004700:	f000 f8d6 	bl	80048b0 <prvAddNewTaskToReadyList>
 8004704:	e001      	b.n	800470a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800470a:	697b      	ldr	r3, [r7, #20]
	}
 800470c:	4618      	mov	r0, r3
 800470e:	3728      	adds	r7, #40	@ 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08c      	sub	sp, #48	@ 0x30
 8004718:	af04      	add	r7, sp, #16
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4618      	mov	r0, r3
 800472a:	f001 fac7 	bl	8005cbc <pvPortMalloc>
 800472e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00e      	beq.n	8004754 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004736:	2054      	movs	r0, #84	@ 0x54
 8004738:	f001 fac0 	bl	8005cbc <pvPortMalloc>
 800473c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	631a      	str	r2, [r3, #48]	@ 0x30
 800474a:	e005      	b.n	8004758 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800474c:	6978      	ldr	r0, [r7, #20]
 800474e:	f001 fb83 	bl	8005e58 <vPortFree>
 8004752:	e001      	b.n	8004758 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	2300      	movs	r3, #0
 800476a:	9303      	str	r3, [sp, #12]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	9302      	str	r3, [sp, #8]
 8004770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f80e 	bl	800479e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004782:	69f8      	ldr	r0, [r7, #28]
 8004784:	f000 f894 	bl	80048b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004788:	2301      	movs	r3, #1
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	e002      	b.n	8004794 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800478e:	f04f 33ff 	mov.w	r3, #4294967295
 8004792:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004794:	69bb      	ldr	r3, [r7, #24]
	}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b088      	sub	sp, #32
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047b6:	3b01      	subs	r3, #1
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f023 0307 	bic.w	r3, r3, #7
 80047c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00b      	beq.n	80047e8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	617b      	str	r3, [r7, #20]
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01f      	beq.n	800482e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	e012      	b.n	800481a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	7819      	ldrb	r1, [r3, #0]
 80047fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	3334      	adds	r3, #52	@ 0x34
 8004804:	460a      	mov	r2, r1
 8004806:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d006      	beq.n	8004822 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	3301      	adds	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b0f      	cmp	r3, #15
 800481e:	d9e9      	bls.n	80047f4 <prvInitialiseNewTask+0x56>
 8004820:	e000      	b.n	8004824 <prvInitialiseNewTask+0x86>
			{
				break;
 8004822:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800482c:	e003      	b.n	8004836 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	2b06      	cmp	r3, #6
 800483a:	d901      	bls.n	8004840 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800483c:	2306      	movs	r3, #6
 800483e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004844:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800484a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	2200      	movs	r2, #0
 8004850:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004854:	3304      	adds	r3, #4
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff f98f 	bl	8003b7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	3318      	adds	r3, #24
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff f98a 	bl	8003b7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800486a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486e:	f1c3 0207 	rsb	r2, r3, #7
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800487a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800487c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487e:	2200      	movs	r2, #0
 8004880:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68f9      	ldr	r1, [r7, #12]
 800488e:	69b8      	ldr	r0, [r7, #24]
 8004890:	f000 ffc4 	bl	800581c <pxPortInitialiseStack>
 8004894:	4602      	mov	r2, r0
 8004896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004898:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800489a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a6:	bf00      	nop
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048b8:	f001 f8de 	bl	8005a78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004968 <prvAddNewTaskToReadyList+0xb8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a29      	ldr	r2, [pc, #164]	@ (8004968 <prvAddNewTaskToReadyList+0xb8>)
 80048c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048c6:	4b29      	ldr	r3, [pc, #164]	@ (800496c <prvAddNewTaskToReadyList+0xbc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048ce:	4a27      	ldr	r2, [pc, #156]	@ (800496c <prvAddNewTaskToReadyList+0xbc>)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048d4:	4b24      	ldr	r3, [pc, #144]	@ (8004968 <prvAddNewTaskToReadyList+0xb8>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d110      	bne.n	80048fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048dc:	f000 fbd4 	bl	8005088 <prvInitialiseTaskLists>
 80048e0:	e00d      	b.n	80048fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048e2:	4b23      	ldr	r3, [pc, #140]	@ (8004970 <prvAddNewTaskToReadyList+0xc0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048ea:	4b20      	ldr	r3, [pc, #128]	@ (800496c <prvAddNewTaskToReadyList+0xbc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d802      	bhi.n	80048fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <prvAddNewTaskToReadyList+0xbc>)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <prvAddNewTaskToReadyList+0xc4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <prvAddNewTaskToReadyList+0xc4>)
 8004906:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	2201      	movs	r2, #1
 800490e:	409a      	lsls	r2, r3
 8004910:	4b19      	ldr	r3, [pc, #100]	@ (8004978 <prvAddNewTaskToReadyList+0xc8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4313      	orrs	r3, r2
 8004916:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <prvAddNewTaskToReadyList+0xc8>)
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4a15      	ldr	r2, [pc, #84]	@ (800497c <prvAddNewTaskToReadyList+0xcc>)
 8004928:	441a      	add	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3304      	adds	r3, #4
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7ff f92f 	bl	8003b94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004936:	f001 f8d1 	bl	8005adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800493a:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <prvAddNewTaskToReadyList+0xc0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00e      	beq.n	8004960 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004942:	4b0a      	ldr	r3, [pc, #40]	@ (800496c <prvAddNewTaskToReadyList+0xbc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	429a      	cmp	r2, r3
 800494e:	d207      	bcs.n	8004960 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004950:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <prvAddNewTaskToReadyList+0xd0>)
 8004952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000904 	.word	0x20000904
 800496c:	20000804 	.word	0x20000804
 8004970:	20000910 	.word	0x20000910
 8004974:	20000920 	.word	0x20000920
 8004978:	2000090c 	.word	0x2000090c
 800497c:	20000808 	.word	0x20000808
 8004980:	e000ed04 	.word	0xe000ed04

08004984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d018      	beq.n	80049c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004996:	4b14      	ldr	r3, [pc, #80]	@ (80049e8 <vTaskDelay+0x64>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <vTaskDelay+0x32>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	60bb      	str	r3, [r7, #8]
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	e7fd      	b.n	80049b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049b6:	f000 f87d 	bl	8004ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049ba:	2100      	movs	r1, #0
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fec7 	bl	8005750 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049c2:	f000 f885 	bl	8004ad0 <xTaskResumeAll>
 80049c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d107      	bne.n	80049de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049ce:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <vTaskDelay+0x68>)
 80049d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	2000092c 	.word	0x2000092c
 80049ec:	e000ed04 	.word	0xe000ed04

080049f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	@ 0x28
 80049f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049fe:	463a      	mov	r2, r7
 8004a00:	1d39      	adds	r1, r7, #4
 8004a02:	f107 0308 	add.w	r3, r7, #8
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc fac0 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a0c:	6839      	ldr	r1, [r7, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	9202      	str	r2, [sp, #8]
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	2300      	movs	r3, #0
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	460a      	mov	r2, r1
 8004a1e:	491f      	ldr	r1, [pc, #124]	@ (8004a9c <vTaskStartScheduler+0xac>)
 8004a20:	481f      	ldr	r0, [pc, #124]	@ (8004aa0 <vTaskStartScheduler+0xb0>)
 8004a22:	f7ff fe17 	bl	8004654 <xTaskCreateStatic>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa4 <vTaskStartScheduler+0xb4>)
 8004a2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa4 <vTaskStartScheduler+0xb4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a34:	2301      	movs	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e001      	b.n	8004a3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d116      	bne.n	8004a72 <vTaskStartScheduler+0x82>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	613b      	str	r3, [r7, #16]
}
 8004a56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a58:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <vTaskStartScheduler+0xb8>)
 8004a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a60:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <vTaskStartScheduler+0xbc>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a66:	4b12      	ldr	r3, [pc, #72]	@ (8004ab0 <vTaskStartScheduler+0xc0>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a6c:	f000 ff60 	bl	8005930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a70:	e00f      	b.n	8004a92 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d10b      	bne.n	8004a92 <vTaskStartScheduler+0xa2>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60fb      	str	r3, [r7, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <vTaskStartScheduler+0x9e>
}
 8004a92:	bf00      	nop
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	08006234 	.word	0x08006234
 8004aa0:	08005059 	.word	0x08005059
 8004aa4:	20000928 	.word	0x20000928
 8004aa8:	20000924 	.word	0x20000924
 8004aac:	20000910 	.word	0x20000910
 8004ab0:	20000908 	.word	0x20000908

08004ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ab8:	4b04      	ldr	r3, [pc, #16]	@ (8004acc <vTaskSuspendAll+0x18>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	4a03      	ldr	r2, [pc, #12]	@ (8004acc <vTaskSuspendAll+0x18>)
 8004ac0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ac2:	bf00      	nop
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	2000092c 	.word	0x2000092c

08004ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ade:	4b42      	ldr	r3, [pc, #264]	@ (8004be8 <xTaskResumeAll+0x118>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <xTaskResumeAll+0x2e>
	__asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	603b      	str	r3, [r7, #0]
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	e7fd      	b.n	8004afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004afe:	f000 ffbb 	bl	8005a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b02:	4b39      	ldr	r3, [pc, #228]	@ (8004be8 <xTaskResumeAll+0x118>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	4a37      	ldr	r2, [pc, #220]	@ (8004be8 <xTaskResumeAll+0x118>)
 8004b0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b0c:	4b36      	ldr	r3, [pc, #216]	@ (8004be8 <xTaskResumeAll+0x118>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d161      	bne.n	8004bd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b14:	4b35      	ldr	r3, [pc, #212]	@ (8004bec <xTaskResumeAll+0x11c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d05d      	beq.n	8004bd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b1c:	e02e      	b.n	8004b7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1e:	4b34      	ldr	r3, [pc, #208]	@ (8004bf0 <xTaskResumeAll+0x120>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3318      	adds	r3, #24
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff f88f 	bl	8003c4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff f88a 	bl	8003c4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	2201      	movs	r2, #1
 8004b40:	409a      	lsls	r2, r3
 8004b42:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf4 <xTaskResumeAll+0x124>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf4 <xTaskResumeAll+0x124>)
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4a27      	ldr	r2, [pc, #156]	@ (8004bf8 <xTaskResumeAll+0x128>)
 8004b5a:	441a      	add	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f7ff f816 	bl	8003b94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6c:	4b23      	ldr	r3, [pc, #140]	@ (8004bfc <xTaskResumeAll+0x12c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b76:	4b22      	ldr	r3, [pc, #136]	@ (8004c00 <xTaskResumeAll+0x130>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf0 <xTaskResumeAll+0x120>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1cc      	bne.n	8004b1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b8a:	f000 fb1b 	bl	80051c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <xTaskResumeAll+0x134>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b9a:	f000 f837 	bl	8004c0c <xTaskIncrementTick>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ba4:	4b16      	ldr	r3, [pc, #88]	@ (8004c00 <xTaskResumeAll+0x130>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f1      	bne.n	8004b9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004bb6:	4b13      	ldr	r3, [pc, #76]	@ (8004c04 <xTaskResumeAll+0x134>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bbc:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <xTaskResumeAll+0x130>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c08 <xTaskResumeAll+0x138>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bd8:	f000 ff80 	bl	8005adc <vPortExitCritical>

	return xAlreadyYielded;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	2000092c 	.word	0x2000092c
 8004bec:	20000904 	.word	0x20000904
 8004bf0:	200008c4 	.word	0x200008c4
 8004bf4:	2000090c 	.word	0x2000090c
 8004bf8:	20000808 	.word	0x20000808
 8004bfc:	20000804 	.word	0x20000804
 8004c00:	20000918 	.word	0x20000918
 8004c04:	20000914 	.word	0x20000914
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c16:	4b4f      	ldr	r3, [pc, #316]	@ (8004d54 <xTaskIncrementTick+0x148>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 808f 	bne.w	8004d3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c20:	4b4d      	ldr	r3, [pc, #308]	@ (8004d58 <xTaskIncrementTick+0x14c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c28:	4a4b      	ldr	r2, [pc, #300]	@ (8004d58 <xTaskIncrementTick+0x14c>)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d121      	bne.n	8004c78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c34:	4b49      	ldr	r3, [pc, #292]	@ (8004d5c <xTaskIncrementTick+0x150>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	603b      	str	r3, [r7, #0]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <xTaskIncrementTick+0x46>
 8004c56:	4b41      	ldr	r3, [pc, #260]	@ (8004d5c <xTaskIncrementTick+0x150>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	4b40      	ldr	r3, [pc, #256]	@ (8004d60 <xTaskIncrementTick+0x154>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3e      	ldr	r2, [pc, #248]	@ (8004d5c <xTaskIncrementTick+0x150>)
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4a3e      	ldr	r2, [pc, #248]	@ (8004d60 <xTaskIncrementTick+0x154>)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d64 <xTaskIncrementTick+0x158>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	4a3c      	ldr	r2, [pc, #240]	@ (8004d64 <xTaskIncrementTick+0x158>)
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	f000 faa6 	bl	80051c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c78:	4b3b      	ldr	r3, [pc, #236]	@ (8004d68 <xTaskIncrementTick+0x15c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d348      	bcc.n	8004d14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c82:	4b36      	ldr	r3, [pc, #216]	@ (8004d5c <xTaskIncrementTick+0x150>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d104      	bne.n	8004c96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8c:	4b36      	ldr	r3, [pc, #216]	@ (8004d68 <xTaskIncrementTick+0x15c>)
 8004c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c92:	601a      	str	r2, [r3, #0]
					break;
 8004c94:	e03e      	b.n	8004d14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c96:	4b31      	ldr	r3, [pc, #196]	@ (8004d5c <xTaskIncrementTick+0x150>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d203      	bcs.n	8004cb6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cae:	4a2e      	ldr	r2, [pc, #184]	@ (8004d68 <xTaskIncrementTick+0x15c>)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cb4:	e02e      	b.n	8004d14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe ffc7 	bl	8003c4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	3318      	adds	r3, #24
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fe ffbe 	bl	8003c4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	4b24      	ldr	r3, [pc, #144]	@ (8004d6c <xTaskIncrementTick+0x160>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	4a22      	ldr	r2, [pc, #136]	@ (8004d6c <xTaskIncrementTick+0x160>)
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d70 <xTaskIncrementTick+0x164>)
 8004cf2:	441a      	add	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f7fe ff4a 	bl	8003b94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d04:	4b1b      	ldr	r3, [pc, #108]	@ (8004d74 <xTaskIncrementTick+0x168>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d3b9      	bcc.n	8004c82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d12:	e7b6      	b.n	8004c82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d14:	4b17      	ldr	r3, [pc, #92]	@ (8004d74 <xTaskIncrementTick+0x168>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1a:	4915      	ldr	r1, [pc, #84]	@ (8004d70 <xTaskIncrementTick+0x164>)
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d901      	bls.n	8004d30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d30:	4b11      	ldr	r3, [pc, #68]	@ (8004d78 <xTaskIncrementTick+0x16c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e004      	b.n	8004d48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d7c <xTaskIncrementTick+0x170>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3301      	adds	r3, #1
 8004d44:	4a0d      	ldr	r2, [pc, #52]	@ (8004d7c <xTaskIncrementTick+0x170>)
 8004d46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d48:	697b      	ldr	r3, [r7, #20]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	2000092c 	.word	0x2000092c
 8004d58:	20000908 	.word	0x20000908
 8004d5c:	200008bc 	.word	0x200008bc
 8004d60:	200008c0 	.word	0x200008c0
 8004d64:	2000091c 	.word	0x2000091c
 8004d68:	20000924 	.word	0x20000924
 8004d6c:	2000090c 	.word	0x2000090c
 8004d70:	20000808 	.word	0x20000808
 8004d74:	20000804 	.word	0x20000804
 8004d78:	20000918 	.word	0x20000918
 8004d7c:	20000914 	.word	0x20000914

08004d80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d86:	4b27      	ldr	r3, [pc, #156]	@ (8004e24 <vTaskSwitchContext+0xa4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d8e:	4b26      	ldr	r3, [pc, #152]	@ (8004e28 <vTaskSwitchContext+0xa8>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d94:	e040      	b.n	8004e18 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004d96:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <vTaskSwitchContext+0xa8>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9c:	4b23      	ldr	r3, [pc, #140]	@ (8004e2c <vTaskSwitchContext+0xac>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	fab3 f383 	clz	r3, r3
 8004da8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004daa:	7afb      	ldrb	r3, [r7, #11]
 8004dac:	f1c3 031f 	rsb	r3, r3, #31
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	491f      	ldr	r1, [pc, #124]	@ (8004e30 <vTaskSwitchContext+0xb0>)
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <vTaskSwitchContext+0x5e>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	607b      	str	r3, [r7, #4]
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <vTaskSwitchContext+0x5a>
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4a11      	ldr	r2, [pc, #68]	@ (8004e30 <vTaskSwitchContext+0xb0>)
 8004dea:	4413      	add	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	3308      	adds	r3, #8
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d104      	bne.n	8004e0e <vTaskSwitchContext+0x8e>
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a07      	ldr	r2, [pc, #28]	@ (8004e34 <vTaskSwitchContext+0xb4>)
 8004e16:	6013      	str	r3, [r2, #0]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	2000092c 	.word	0x2000092c
 8004e28:	20000918 	.word	0x20000918
 8004e2c:	2000090c 	.word	0x2000090c
 8004e30:	20000808 	.word	0x20000808
 8004e34:	20000804 	.word	0x20000804

08004e38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10b      	bne.n	8004e60 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	60fb      	str	r3, [r7, #12]
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	e7fd      	b.n	8004e5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e60:	4b07      	ldr	r3, [pc, #28]	@ (8004e80 <vTaskPlaceOnEventList+0x48>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3318      	adds	r3, #24
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fe feb7 	bl	8003bdc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e6e:	2101      	movs	r1, #1
 8004e70:	6838      	ldr	r0, [r7, #0]
 8004e72:	f000 fc6d 	bl	8005750 <prvAddCurrentTaskToDelayedList>
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000804 	.word	0x20000804

08004e84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	60fb      	str	r3, [r7, #12]
}
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	e7fd      	b.n	8004eae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	3318      	adds	r3, #24
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fec9 	bl	8003c4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f34 <xTaskRemoveFromEventList+0xb0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d11c      	bne.n	8004efe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fe fec0 	bl	8003c4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	4b18      	ldr	r3, [pc, #96]	@ (8004f38 <xTaskRemoveFromEventList+0xb4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	4a16      	ldr	r2, [pc, #88]	@ (8004f38 <xTaskRemoveFromEventList+0xb4>)
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4a13      	ldr	r2, [pc, #76]	@ (8004f3c <xTaskRemoveFromEventList+0xb8>)
 8004eee:	441a      	add	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	f7fe fe4c 	bl	8003b94 <vListInsertEnd>
 8004efc:	e005      	b.n	8004f0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	3318      	adds	r3, #24
 8004f02:	4619      	mov	r1, r3
 8004f04:	480e      	ldr	r0, [pc, #56]	@ (8004f40 <xTaskRemoveFromEventList+0xbc>)
 8004f06:	f7fe fe45 	bl	8003b94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <xTaskRemoveFromEventList+0xc0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d905      	bls.n	8004f24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <xTaskRemoveFromEventList+0xc4>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e001      	b.n	8004f28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f28:	697b      	ldr	r3, [r7, #20]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	2000092c 	.word	0x2000092c
 8004f38:	2000090c 	.word	0x2000090c
 8004f3c:	20000808 	.word	0x20000808
 8004f40:	200008c4 	.word	0x200008c4
 8004f44:	20000804 	.word	0x20000804
 8004f48:	20000918 	.word	0x20000918

08004f4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <vTaskInternalSetTimeOutState+0x24>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f5c:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <vTaskInternalSetTimeOutState+0x28>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	605a      	str	r2, [r3, #4]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	2000091c 	.word	0x2000091c
 8004f74:	20000908 	.word	0x20000908

08004f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	613b      	str	r3, [r7, #16]
}
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
 8004f9e:	e7fd      	b.n	8004f9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10b      	bne.n	8004fbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60fb      	str	r3, [r7, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004fbe:	f000 fd5b 	bl	8005a78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <xTaskCheckForTimeOut+0xc0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d102      	bne.n	8004fe2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e023      	b.n	800502a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4b15      	ldr	r3, [pc, #84]	@ (800503c <xTaskCheckForTimeOut+0xc4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d007      	beq.n	8004ffe <xTaskCheckForTimeOut+0x86>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	e015      	b.n	800502a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	429a      	cmp	r2, r3
 8005006:	d20b      	bcs.n	8005020 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff99 	bl	8004f4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	e004      	b.n	800502a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005026:	2301      	movs	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800502a:	f000 fd57 	bl	8005adc <vPortExitCritical>

	return xReturn;
 800502e:	69fb      	ldr	r3, [r7, #28]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	20000908 	.word	0x20000908
 800503c:	2000091c 	.word	0x2000091c

08005040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005044:	4b03      	ldr	r3, [pc, #12]	@ (8005054 <vTaskMissedYield+0x14>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
}
 800504a:	bf00      	nop
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	20000918 	.word	0x20000918

08005058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005060:	f000 f852 	bl	8005108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005064:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <prvIdleTask+0x28>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d9f9      	bls.n	8005060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800506c:	4b05      	ldr	r3, [pc, #20]	@ (8005084 <prvIdleTask+0x2c>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800507c:	e7f0      	b.n	8005060 <prvIdleTask+0x8>
 800507e:	bf00      	nop
 8005080:	20000808 	.word	0x20000808
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800508e:	2300      	movs	r3, #0
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	e00c      	b.n	80050ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4a12      	ldr	r2, [pc, #72]	@ (80050e8 <prvInitialiseTaskLists+0x60>)
 80050a0:	4413      	add	r3, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe fd49 	bl	8003b3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3301      	adds	r3, #1
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	d9ef      	bls.n	8005094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050b4:	480d      	ldr	r0, [pc, #52]	@ (80050ec <prvInitialiseTaskLists+0x64>)
 80050b6:	f7fe fd40 	bl	8003b3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050ba:	480d      	ldr	r0, [pc, #52]	@ (80050f0 <prvInitialiseTaskLists+0x68>)
 80050bc:	f7fe fd3d 	bl	8003b3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050c0:	480c      	ldr	r0, [pc, #48]	@ (80050f4 <prvInitialiseTaskLists+0x6c>)
 80050c2:	f7fe fd3a 	bl	8003b3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050c6:	480c      	ldr	r0, [pc, #48]	@ (80050f8 <prvInitialiseTaskLists+0x70>)
 80050c8:	f7fe fd37 	bl	8003b3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050cc:	480b      	ldr	r0, [pc, #44]	@ (80050fc <prvInitialiseTaskLists+0x74>)
 80050ce:	f7fe fd34 	bl	8003b3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <prvInitialiseTaskLists+0x78>)
 80050d4:	4a05      	ldr	r2, [pc, #20]	@ (80050ec <prvInitialiseTaskLists+0x64>)
 80050d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005104 <prvInitialiseTaskLists+0x7c>)
 80050da:	4a05      	ldr	r2, [pc, #20]	@ (80050f0 <prvInitialiseTaskLists+0x68>)
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000808 	.word	0x20000808
 80050ec:	20000894 	.word	0x20000894
 80050f0:	200008a8 	.word	0x200008a8
 80050f4:	200008c4 	.word	0x200008c4
 80050f8:	200008d8 	.word	0x200008d8
 80050fc:	200008f0 	.word	0x200008f0
 8005100:	200008bc 	.word	0x200008bc
 8005104:	200008c0 	.word	0x200008c0

08005108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800510e:	e019      	b.n	8005144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005110:	f000 fcb2 	bl	8005a78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005114:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <prvCheckTasksWaitingTermination+0x50>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe fd94 	bl	8003c4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005126:	4b0d      	ldr	r3, [pc, #52]	@ (800515c <prvCheckTasksWaitingTermination+0x54>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3b01      	subs	r3, #1
 800512c:	4a0b      	ldr	r2, [pc, #44]	@ (800515c <prvCheckTasksWaitingTermination+0x54>)
 800512e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005130:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <prvCheckTasksWaitingTermination+0x58>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3b01      	subs	r3, #1
 8005136:	4a0a      	ldr	r2, [pc, #40]	@ (8005160 <prvCheckTasksWaitingTermination+0x58>)
 8005138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800513a:	f000 fccf 	bl	8005adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f810 	bl	8005164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <prvCheckTasksWaitingTermination+0x58>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e1      	bne.n	8005110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200008d8 	.word	0x200008d8
 800515c:	20000904 	.word	0x20000904
 8005160:	200008ec 	.word	0x200008ec

08005164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fe6c 	bl	8005e58 <vPortFree>
				vPortFree( pxTCB );
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fe69 	bl	8005e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005186:	e019      	b.n	80051bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800518e:	2b01      	cmp	r3, #1
 8005190:	d103      	bne.n	800519a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fe60 	bl	8005e58 <vPortFree>
	}
 8005198:	e010      	b.n	80051bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d00b      	beq.n	80051bc <prvDeleteTCB+0x58>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	60fb      	str	r3, [r7, #12]
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <prvDeleteTCB+0x54>
	}
 80051bc:	bf00      	nop
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ca:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <prvResetNextTaskUnblockTime+0x38>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005200 <prvResetNextTaskUnblockTime+0x3c>)
 80051d6:	f04f 32ff 	mov.w	r2, #4294967295
 80051da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051dc:	e008      	b.n	80051f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051de:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <prvResetNextTaskUnblockTime+0x38>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4a04      	ldr	r2, [pc, #16]	@ (8005200 <prvResetNextTaskUnblockTime+0x3c>)
 80051ee:	6013      	str	r3, [r2, #0]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	200008bc 	.word	0x200008bc
 8005200:	20000924 	.word	0x20000924

08005204 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800520a:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <xTaskGetCurrentTaskHandle+0x1c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005210:	687b      	ldr	r3, [r7, #4]
	}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000804 	.word	0x20000804

08005224 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800522a:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <xTaskGetSchedulerState+0x34>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005232:	2301      	movs	r3, #1
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	e008      	b.n	800524a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005238:	4b08      	ldr	r3, [pc, #32]	@ (800525c <xTaskGetSchedulerState+0x38>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005240:	2302      	movs	r3, #2
 8005242:	607b      	str	r3, [r7, #4]
 8005244:	e001      	b.n	800524a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005246:	2300      	movs	r3, #0
 8005248:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800524a:	687b      	ldr	r3, [r7, #4]
	}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	20000910 	.word	0x20000910
 800525c:	2000092c 	.word	0x2000092c

08005260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d070      	beq.n	8005358 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005276:	4b3b      	ldr	r3, [pc, #236]	@ (8005364 <xTaskPriorityDisinherit+0x104>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	429a      	cmp	r2, r3
 800527e:	d00b      	beq.n	8005298 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	60fb      	str	r3, [r7, #12]
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10b      	bne.n	80052b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	60bb      	str	r3, [r7, #8]
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052bc:	1e5a      	subs	r2, r3, #1
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d044      	beq.n	8005358 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d140      	bne.n	8005358 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3304      	adds	r3, #4
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe fcb7 	bl	8003c4e <uxListRemove>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d115      	bne.n	8005312 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ea:	491f      	ldr	r1, [pc, #124]	@ (8005368 <xTaskPriorityDisinherit+0x108>)
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <xTaskPriorityDisinherit+0xb2>
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005300:	2201      	movs	r2, #1
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43da      	mvns	r2, r3
 8005308:	4b18      	ldr	r3, [pc, #96]	@ (800536c <xTaskPriorityDisinherit+0x10c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4013      	ands	r3, r2
 800530e:	4a17      	ldr	r2, [pc, #92]	@ (800536c <xTaskPriorityDisinherit+0x10c>)
 8005310:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	f1c3 0207 	rsb	r2, r3, #7
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	2201      	movs	r2, #1
 800532c:	409a      	lsls	r2, r3
 800532e:	4b0f      	ldr	r3, [pc, #60]	@ (800536c <xTaskPriorityDisinherit+0x10c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4313      	orrs	r3, r2
 8005334:	4a0d      	ldr	r2, [pc, #52]	@ (800536c <xTaskPriorityDisinherit+0x10c>)
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4a08      	ldr	r2, [pc, #32]	@ (8005368 <xTaskPriorityDisinherit+0x108>)
 8005346:	441a      	add	r2, r3
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7fe fc20 	bl	8003b94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005354:	2301      	movs	r3, #1
 8005356:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005358:	697b      	ldr	r3, [r7, #20]
	}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000804 	.word	0x20000804
 8005368:	20000808 	.word	0x20000808
 800536c:	2000090c 	.word	0x2000090c

08005370 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800537e:	f000 fb7b 	bl	8005a78 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005382:	4b26      	ldr	r3, [pc, #152]	@ (800541c <xTaskNotifyWait+0xac>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d01a      	beq.n	80053c6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005390:	4b22      	ldr	r3, [pc, #136]	@ (800541c <xTaskNotifyWait+0xac>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	43d2      	mvns	r2, r2
 800539a:	400a      	ands	r2, r1
 800539c:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800539e:	4b1f      	ldr	r3, [pc, #124]	@ (800541c <xTaskNotifyWait+0xac>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053ae:	2101      	movs	r1, #1
 80053b0:	6838      	ldr	r0, [r7, #0]
 80053b2:	f000 f9cd 	bl	8005750 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80053b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005420 <xTaskNotifyWait+0xb0>)
 80053b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80053c6:	f000 fb89 	bl	8005adc <vPortExitCritical>

		taskENTER_CRITICAL();
 80053ca:	f000 fb55 	bl	8005a78 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80053d4:	4b11      	ldr	r3, [pc, #68]	@ (800541c <xTaskNotifyWait+0xac>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80053de:	4b0f      	ldr	r3, [pc, #60]	@ (800541c <xTaskNotifyWait+0xac>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d002      	beq.n	80053f2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e008      	b.n	8005404 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80053f2:	4b0a      	ldr	r3, [pc, #40]	@ (800541c <xTaskNotifyWait+0xac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	43d2      	mvns	r2, r2
 80053fc:	400a      	ands	r2, r1
 80053fe:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 8005400:	2301      	movs	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005404:	4b05      	ldr	r3, [pc, #20]	@ (800541c <xTaskNotifyWait+0xac>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800540e:	f000 fb65 	bl	8005adc <vPortExitCritical>

		return xReturn;
 8005412:	697b      	ldr	r3, [r7, #20]
	}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000804 	.word	0x20000804
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	@ 0x28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005434:	2301      	movs	r3, #1
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10b      	bne.n	8005456 <xTaskGenericNotify+0x32>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	61bb      	str	r3, [r7, #24]
}
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	e7fd      	b.n	8005452 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800545a:	f000 fb0d 	bl	8005a78 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005472:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	2b04      	cmp	r3, #4
 8005480:	d827      	bhi.n	80054d2 <xTaskGenericNotify+0xae>
 8005482:	a201      	add	r2, pc, #4	@ (adr r2, 8005488 <xTaskGenericNotify+0x64>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054f5 	.word	0x080054f5
 800548c:	0800549d 	.word	0x0800549d
 8005490:	080054ab 	.word	0x080054ab
 8005494:	080054b7 	.word	0x080054b7
 8005498:	080054bf 	.word	0x080054bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80054a8:	e027      	b.n	80054fa <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80054b4:	e021      	b.n	80054fa <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 80054bc:	e01d      	b.n	80054fa <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80054be:	7ffb      	ldrb	r3, [r7, #31]
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d003      	beq.n	80054cc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80054ca:	e016      	b.n	80054fa <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80054d0:	e013      	b.n	80054fa <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d00d      	beq.n	80054f8 <xTaskGenericNotify+0xd4>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	617b      	str	r3, [r7, #20]
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <xTaskGenericNotify+0xcc>
					break;
 80054f4:	bf00      	nop
 80054f6:	e000      	b.n	80054fa <xTaskGenericNotify+0xd6>

					break;
 80054f8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80054fa:	7ffb      	ldrb	r3, [r7, #31]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d13a      	bne.n	8005576 <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	3304      	adds	r3, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe fba2 	bl	8003c4e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	2201      	movs	r2, #1
 8005510:	409a      	lsls	r2, r3
 8005512:	4b1c      	ldr	r3, [pc, #112]	@ (8005584 <xTaskGenericNotify+0x160>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4313      	orrs	r3, r2
 8005518:	4a1a      	ldr	r2, [pc, #104]	@ (8005584 <xTaskGenericNotify+0x160>)
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4a17      	ldr	r2, [pc, #92]	@ (8005588 <xTaskGenericNotify+0x164>)
 800552a:	441a      	add	r2, r3
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f7fe fb2e 	bl	8003b94 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <xTaskGenericNotify+0x134>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	613b      	str	r3, [r7, #16]
}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	e7fd      	b.n	8005554 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555c:	4b0b      	ldr	r3, [pc, #44]	@ (800558c <xTaskGenericNotify+0x168>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005562:	429a      	cmp	r2, r3
 8005564:	d907      	bls.n	8005576 <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005566:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <xTaskGenericNotify+0x16c>)
 8005568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005576:	f000 fab1 	bl	8005adc <vPortExitCritical>

		return xReturn;
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800557c:	4618      	mov	r0, r3
 800557e:	3728      	adds	r7, #40	@ 0x28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	2000090c 	.word	0x2000090c
 8005588:	20000808 	.word	0x20000808
 800558c:	20000804 	.word	0x20000804
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08e      	sub	sp, #56	@ 0x38
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80055a4:	2301      	movs	r3, #1
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	e7fd      	b.n	80055c2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055c6:	f000 fb37 	bl	8005c38 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80055ce:	f3ef 8211 	mrs	r2, BASEPRI
 80055d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	623a      	str	r2, [r7, #32]
 80055e4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80055e6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	2202      	movs	r2, #2
 8005606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	2b04      	cmp	r3, #4
 800560e:	d829      	bhi.n	8005664 <xTaskGenericNotifyFromISR+0xd0>
 8005610:	a201      	add	r2, pc, #4	@ (adr r2, 8005618 <xTaskGenericNotifyFromISR+0x84>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	08005687 	.word	0x08005687
 800561c:	0800562d 	.word	0x0800562d
 8005620:	0800563b 	.word	0x0800563b
 8005624:	08005647 	.word	0x08005647
 8005628:	0800564f 	.word	0x0800564f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	431a      	orrs	r2, r3
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005638:	e028      	b.n	800568c <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005642:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8005644:	e022      	b.n	800568c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800564c:	e01e      	b.n	800568c <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800564e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005652:	2b02      	cmp	r3, #2
 8005654:	d003      	beq.n	800565e <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800565c:	e016      	b.n	800568c <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800565e:	2300      	movs	r3, #0
 8005660:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8005662:	e013      	b.n	800568c <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d00d      	beq.n	800568a <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	61bb      	str	r3, [r7, #24]
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	e7fd      	b.n	8005682 <xTaskGenericNotifyFromISR+0xee>
					break;
 8005686:	bf00      	nop
 8005688:	e000      	b.n	800568c <xTaskGenericNotifyFromISR+0xf8>
					break;
 800568a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800568c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005690:	2b01      	cmp	r3, #1
 8005692:	d146      	bne.n	8005722 <xTaskGenericNotifyFromISR+0x18e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	617b      	str	r3, [r7, #20]
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	e7fd      	b.n	80056b0 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b4:	4b20      	ldr	r3, [pc, #128]	@ (8005738 <xTaskGenericNotifyFromISR+0x1a4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d11c      	bne.n	80056f6 <xTaskGenericNotifyFromISR+0x162>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056be:	3304      	adds	r3, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fe fac4 	bl	8003c4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	2201      	movs	r2, #1
 80056cc:	409a      	lsls	r2, r3
 80056ce:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <xTaskGenericNotifyFromISR+0x1a8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	4a19      	ldr	r2, [pc, #100]	@ (800573c <xTaskGenericNotifyFromISR+0x1a8>)
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4a16      	ldr	r2, [pc, #88]	@ (8005740 <xTaskGenericNotifyFromISR+0x1ac>)
 80056e6:	441a      	add	r2, r3
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f7fe fa50 	bl	8003b94 <vListInsertEnd>
 80056f4:	e005      	b.n	8005702 <xTaskGenericNotifyFromISR+0x16e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	3318      	adds	r3, #24
 80056fa:	4619      	mov	r1, r3
 80056fc:	4811      	ldr	r0, [pc, #68]	@ (8005744 <xTaskGenericNotifyFromISR+0x1b0>)
 80056fe:	f7fe fa49 	bl	8003b94 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	4b10      	ldr	r3, [pc, #64]	@ (8005748 <xTaskGenericNotifyFromISR+0x1b4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	429a      	cmp	r2, r3
 800570e:	d908      	bls.n	8005722 <xTaskGenericNotifyFromISR+0x18e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <xTaskGenericNotifyFromISR+0x188>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800571c:	4b0b      	ldr	r3, [pc, #44]	@ (800574c <xTaskGenericNotifyFromISR+0x1b8>)
 800571e:	2201      	movs	r2, #1
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005724:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f383 8811 	msr	BASEPRI, r3
}
 800572c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8005730:	4618      	mov	r0, r3
 8005732:	3738      	adds	r7, #56	@ 0x38
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	2000092c 	.word	0x2000092c
 800573c:	2000090c 	.word	0x2000090c
 8005740:	20000808 	.word	0x20000808
 8005744:	200008c4 	.word	0x200008c4
 8005748:	20000804 	.word	0x20000804
 800574c:	20000918 	.word	0x20000918

08005750 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800575a:	4b29      	ldr	r3, [pc, #164]	@ (8005800 <prvAddCurrentTaskToDelayedList+0xb0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005760:	4b28      	ldr	r3, [pc, #160]	@ (8005804 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3304      	adds	r3, #4
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fa71 	bl	8003c4e <uxListRemove>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005772:	4b24      	ldr	r3, [pc, #144]	@ (8005804 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	2201      	movs	r2, #1
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43da      	mvns	r2, r3
 8005780:	4b21      	ldr	r3, [pc, #132]	@ (8005808 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4013      	ands	r3, r2
 8005786:	4a20      	ldr	r2, [pc, #128]	@ (8005808 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005788:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d10a      	bne.n	80057a8 <prvAddCurrentTaskToDelayedList+0x58>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005798:	4b1a      	ldr	r3, [pc, #104]	@ (8005804 <prvAddCurrentTaskToDelayedList+0xb4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3304      	adds	r3, #4
 800579e:	4619      	mov	r1, r3
 80057a0:	481a      	ldr	r0, [pc, #104]	@ (800580c <prvAddCurrentTaskToDelayedList+0xbc>)
 80057a2:	f7fe f9f7 	bl	8003b94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057a6:	e026      	b.n	80057f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057b0:	4b14      	ldr	r3, [pc, #80]	@ (8005804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d209      	bcs.n	80057d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c0:	4b13      	ldr	r3, [pc, #76]	@ (8005810 <prvAddCurrentTaskToDelayedList+0xc0>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3304      	adds	r3, #4
 80057ca:	4619      	mov	r1, r3
 80057cc:	4610      	mov	r0, r2
 80057ce:	f7fe fa05 	bl	8003bdc <vListInsert>
}
 80057d2:	e010      	b.n	80057f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005814 <prvAddCurrentTaskToDelayedList+0xc4>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005804 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3304      	adds	r3, #4
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f7fe f9fb 	bl	8003bdc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d202      	bcs.n	80057f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057f0:	4a09      	ldr	r2, [pc, #36]	@ (8005818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6013      	str	r3, [r2, #0]
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000908 	.word	0x20000908
 8005804:	20000804 	.word	0x20000804
 8005808:	2000090c 	.word	0x2000090c
 800580c:	200008f0 	.word	0x200008f0
 8005810:	200008c0 	.word	0x200008c0
 8005814:	200008bc 	.word	0x200008bc
 8005818:	20000924 	.word	0x20000924

0800581c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3b04      	subs	r3, #4
 800582c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3b04      	subs	r3, #4
 800583a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3b04      	subs	r3, #4
 800584a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800584c:	4a0c      	ldr	r2, [pc, #48]	@ (8005880 <pxPortInitialiseStack+0x64>)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b14      	subs	r3, #20
 8005856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3b04      	subs	r3, #4
 8005862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f06f 0202 	mvn.w	r2, #2
 800586a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3b20      	subs	r3, #32
 8005870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005872:	68fb      	ldr	r3, [r7, #12]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	08005885 	.word	0x08005885

08005884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800588e:	4b13      	ldr	r3, [pc, #76]	@ (80058dc <prvTaskExitError+0x58>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005896:	d00b      	beq.n	80058b0 <prvTaskExitError+0x2c>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	60fb      	str	r3, [r7, #12]
}
 80058aa:	bf00      	nop
 80058ac:	bf00      	nop
 80058ae:	e7fd      	b.n	80058ac <prvTaskExitError+0x28>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	60bb      	str	r3, [r7, #8]
}
 80058c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058c4:	bf00      	nop
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0fc      	beq.n	80058c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	2000000c 	.word	0x2000000c

080058e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058e0:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <pxCurrentTCBConst2>)
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	f380 8809 	msr	PSP, r0
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f380 8811 	msr	BASEPRI, r0
 80058fa:	4770      	bx	lr
 80058fc:	f3af 8000 	nop.w

08005900 <pxCurrentTCBConst2>:
 8005900:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop

08005908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005908:	4808      	ldr	r0, [pc, #32]	@ (800592c <prvPortStartFirstTask+0x24>)
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	6800      	ldr	r0, [r0, #0]
 800590e:	f380 8808 	msr	MSP, r0
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f380 8814 	msr	CONTROL, r0
 800591a:	b662      	cpsie	i
 800591c:	b661      	cpsie	f
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	df00      	svc	0
 8005928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800592a:	bf00      	nop
 800592c:	e000ed08 	.word	0xe000ed08

08005930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005936:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <xPortStartScheduler+0x124>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a47      	ldr	r2, [pc, #284]	@ (8005a58 <xPortStartScheduler+0x128>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10b      	bne.n	8005958 <xPortStartScheduler+0x28>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	613b      	str	r3, [r7, #16]
}
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005958:	4b3e      	ldr	r3, [pc, #248]	@ (8005a54 <xPortStartScheduler+0x124>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a5c <xPortStartScheduler+0x12c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10b      	bne.n	800597a <xPortStartScheduler+0x4a>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	60fb      	str	r3, [r7, #12]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800597a:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <xPortStartScheduler+0x130>)
 800597c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	22ff      	movs	r2, #255	@ 0xff
 800598a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005994:	78fb      	ldrb	r3, [r7, #3]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800599c:	b2da      	uxtb	r2, r3
 800599e:	4b31      	ldr	r3, [pc, #196]	@ (8005a64 <xPortStartScheduler+0x134>)
 80059a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059a2:	4b31      	ldr	r3, [pc, #196]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059a4:	2207      	movs	r2, #7
 80059a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059a8:	e009      	b.n	80059be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80059aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c6:	2b80      	cmp	r3, #128	@ 0x80
 80059c8:	d0ef      	beq.n	80059aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059ca:	4b27      	ldr	r3, [pc, #156]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1c3 0307 	rsb	r3, r3, #7
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d00b      	beq.n	80059ee <xPortStartScheduler+0xbe>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60bb      	str	r3, [r7, #8]
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	e7fd      	b.n	80059ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <xPortStartScheduler+0x138>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a00:	4a19      	ldr	r2, [pc, #100]	@ (8005a68 <xPortStartScheduler+0x138>)
 8005a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a0c:	4b17      	ldr	r3, [pc, #92]	@ (8005a6c <xPortStartScheduler+0x13c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a16      	ldr	r2, [pc, #88]	@ (8005a6c <xPortStartScheduler+0x13c>)
 8005a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a18:	4b14      	ldr	r3, [pc, #80]	@ (8005a6c <xPortStartScheduler+0x13c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	@ (8005a6c <xPortStartScheduler+0x13c>)
 8005a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a24:	f000 f8da 	bl	8005bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a28:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <xPortStartScheduler+0x140>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a2e:	f000 f8f9 	bl	8005c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a32:	4b10      	ldr	r3, [pc, #64]	@ (8005a74 <xPortStartScheduler+0x144>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a0f      	ldr	r2, [pc, #60]	@ (8005a74 <xPortStartScheduler+0x144>)
 8005a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a3e:	f7ff ff63 	bl	8005908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a42:	f7ff f99d 	bl	8004d80 <vTaskSwitchContext>
	prvTaskExitError();
 8005a46:	f7ff ff1d 	bl	8005884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	e000ed00 	.word	0xe000ed00
 8005a58:	410fc271 	.word	0x410fc271
 8005a5c:	410fc270 	.word	0x410fc270
 8005a60:	e000e400 	.word	0xe000e400
 8005a64:	20000930 	.word	0x20000930
 8005a68:	20000934 	.word	0x20000934
 8005a6c:	e000ed20 	.word	0xe000ed20
 8005a70:	2000000c 	.word	0x2000000c
 8005a74:	e000ef34 	.word	0xe000ef34

08005a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a92:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <vPortEnterCritical+0x5c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad4 <vPortEnterCritical+0x5c>)
 8005a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad4 <vPortEnterCritical+0x5c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d110      	bne.n	8005ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <vPortEnterCritical+0x60>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	603b      	str	r3, [r7, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	e7fd      	b.n	8005ac2 <vPortEnterCritical+0x4a>
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	2000000c 	.word	0x2000000c
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ae2:	4b12      	ldr	r3, [pc, #72]	@ (8005b2c <vPortExitCritical+0x50>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <vPortExitCritical+0x26>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	607b      	str	r3, [r7, #4]
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	e7fd      	b.n	8005afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b02:	4b0a      	ldr	r3, [pc, #40]	@ (8005b2c <vPortExitCritical+0x50>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	4a08      	ldr	r2, [pc, #32]	@ (8005b2c <vPortExitCritical+0x50>)
 8005b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b0c:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <vPortExitCritical+0x50>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d105      	bne.n	8005b20 <vPortExitCritical+0x44>
 8005b14:	2300      	movs	r3, #0
 8005b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	f383 8811 	msr	BASEPRI, r3
}
 8005b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	2000000c 	.word	0x2000000c

08005b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b30:	f3ef 8009 	mrs	r0, PSP
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4b15      	ldr	r3, [pc, #84]	@ (8005b90 <pxCurrentTCBConst>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f01e 0f10 	tst.w	lr, #16
 8005b40:	bf08      	it	eq
 8005b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	6010      	str	r0, [r2, #0]
 8005b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b54:	f380 8811 	msr	BASEPRI, r0
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f7ff f90e 	bl	8004d80 <vTaskSwitchContext>
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	f380 8811 	msr	BASEPRI, r0
 8005b6c:	bc09      	pop	{r0, r3}
 8005b6e:	6819      	ldr	r1, [r3, #0]
 8005b70:	6808      	ldr	r0, [r1, #0]
 8005b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b76:	f01e 0f10 	tst.w	lr, #16
 8005b7a:	bf08      	it	eq
 8005b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b80:	f380 8809 	msr	PSP, r0
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w

08005b90 <pxCurrentTCBConst>:
 8005b90:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop

08005b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	607b      	str	r3, [r7, #4]
}
 8005bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bb2:	f7ff f82b 	bl	8004c0c <xTaskIncrementTick>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <xPortSysTickHandler+0x40>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005be6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <vPortSetupTimerInterrupt+0x38>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bec:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <vPortSetupTimerInterrupt+0x3c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8005c1c <vPortSetupTimerInterrupt+0x40>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	4a09      	ldr	r2, [pc, #36]	@ (8005c20 <vPortSetupTimerInterrupt+0x44>)
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bfe:	4b04      	ldr	r3, [pc, #16]	@ (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e010 	.word	0xe000e010
 8005c14:	e000e018 	.word	0xe000e018
 8005c18:	20000000 	.word	0x20000000
 8005c1c:	10624dd3 	.word	0x10624dd3
 8005c20:	e000e014 	.word	0xe000e014

08005c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c34 <vPortEnableVFP+0x10>
 8005c28:	6801      	ldr	r1, [r0, #0]
 8005c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005c2e:	6001      	str	r1, [r0, #0]
 8005c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c32:	bf00      	nop
 8005c34:	e000ed88 	.word	0xe000ed88

08005c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c3e:	f3ef 8305 	mrs	r3, IPSR
 8005c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b0f      	cmp	r3, #15
 8005c48:	d915      	bls.n	8005c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c4a:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <vPortValidateInterruptPriority+0x74>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c54:	4b16      	ldr	r3, [pc, #88]	@ (8005cb0 <vPortValidateInterruptPriority+0x78>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	7afa      	ldrb	r2, [r7, #11]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d20b      	bcs.n	8005c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	607b      	str	r3, [r7, #4]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c76:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb4 <vPortValidateInterruptPriority+0x7c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb8 <vPortValidateInterruptPriority+0x80>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d90b      	bls.n	8005c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	603b      	str	r3, [r7, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	e7fd      	b.n	8005c9a <vPortValidateInterruptPriority+0x62>
	}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	e000e3f0 	.word	0xe000e3f0
 8005cb0:	20000930 	.word	0x20000930
 8005cb4:	e000ed0c 	.word	0xe000ed0c
 8005cb8:	20000934 	.word	0x20000934

08005cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08a      	sub	sp, #40	@ 0x28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cc8:	f7fe fef4 	bl	8004ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8005e40 <pvPortMalloc+0x184>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cd4:	f000 f924 	bl	8005f20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e44 <pvPortMalloc+0x188>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 8095 	bne.w	8005e10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01e      	beq.n	8005d2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005cec:	2208      	movs	r2, #8
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d015      	beq.n	8005d2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f023 0307 	bic.w	r3, r3, #7
 8005d04:	3308      	adds	r3, #8
 8005d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00b      	beq.n	8005d2a <pvPortMalloc+0x6e>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	617b      	str	r3, [r7, #20]
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	e7fd      	b.n	8005d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d06f      	beq.n	8005e10 <pvPortMalloc+0x154>
 8005d30:	4b45      	ldr	r3, [pc, #276]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d86a      	bhi.n	8005e10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d3a:	4b44      	ldr	r3, [pc, #272]	@ (8005e4c <pvPortMalloc+0x190>)
 8005d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d3e:	4b43      	ldr	r3, [pc, #268]	@ (8005e4c <pvPortMalloc+0x190>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d44:	e004      	b.n	8005d50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d903      	bls.n	8005d62 <pvPortMalloc+0xa6>
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f1      	bne.n	8005d46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d62:	4b37      	ldr	r3, [pc, #220]	@ (8005e40 <pvPortMalloc+0x184>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d051      	beq.n	8005e10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2208      	movs	r2, #8
 8005d72:	4413      	add	r3, r2
 8005d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	1ad2      	subs	r2, r2, r3
 8005d86:	2308      	movs	r3, #8
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d920      	bls.n	8005dd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4413      	add	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00b      	beq.n	8005db8 <pvPortMalloc+0xfc>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	613b      	str	r3, [r7, #16]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dca:	69b8      	ldr	r0, [r7, #24]
 8005dcc:	f000 f90a 	bl	8005fe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	4a1b      	ldr	r2, [pc, #108]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dde:	4b1a      	ldr	r3, [pc, #104]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e50 <pvPortMalloc+0x194>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d203      	bcs.n	8005df2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dea:	4b17      	ldr	r3, [pc, #92]	@ (8005e48 <pvPortMalloc+0x18c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a18      	ldr	r2, [pc, #96]	@ (8005e50 <pvPortMalloc+0x194>)
 8005df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4b13      	ldr	r3, [pc, #76]	@ (8005e44 <pvPortMalloc+0x188>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e06:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <pvPortMalloc+0x198>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	4a11      	ldr	r2, [pc, #68]	@ (8005e54 <pvPortMalloc+0x198>)
 8005e0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e10:	f7fe fe5e 	bl	8004ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <pvPortMalloc+0x17a>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	60fb      	str	r3, [r7, #12]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <pvPortMalloc+0x176>
	return pvReturn;
 8005e36:	69fb      	ldr	r3, [r7, #28]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3728      	adds	r7, #40	@ 0x28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20004540 	.word	0x20004540
 8005e44:	20004554 	.word	0x20004554
 8005e48:	20004544 	.word	0x20004544
 8005e4c:	20004538 	.word	0x20004538
 8005e50:	20004548 	.word	0x20004548
 8005e54:	2000454c 	.word	0x2000454c

08005e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d04f      	beq.n	8005f0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	425b      	negs	r3, r3
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4413      	add	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b25      	ldr	r3, [pc, #148]	@ (8005f14 <vPortFree+0xbc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <vPortFree+0x46>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60fb      	str	r3, [r7, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <vPortFree+0x66>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	60bb      	str	r3, [r7, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	4b14      	ldr	r3, [pc, #80]	@ (8005f14 <vPortFree+0xbc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01e      	beq.n	8005f0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11a      	bne.n	8005f0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <vPortFree+0xbc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	401a      	ands	r2, r3
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ee4:	f7fe fde6 	bl	8004ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	4b0a      	ldr	r3, [pc, #40]	@ (8005f18 <vPortFree+0xc0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	4a09      	ldr	r2, [pc, #36]	@ (8005f18 <vPortFree+0xc0>)
 8005ef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ef6:	6938      	ldr	r0, [r7, #16]
 8005ef8:	f000 f874 	bl	8005fe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <vPortFree+0xc4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3301      	adds	r3, #1
 8005f02:	4a06      	ldr	r2, [pc, #24]	@ (8005f1c <vPortFree+0xc4>)
 8005f04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f06:	f7fe fde3 	bl	8004ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20004554 	.word	0x20004554
 8005f18:	20004544 	.word	0x20004544
 8005f1c:	20004550 	.word	0x20004550

08005f20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005f2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f2c:	4b27      	ldr	r3, [pc, #156]	@ (8005fcc <prvHeapInit+0xac>)
 8005f2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00c      	beq.n	8005f54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	3307      	adds	r3, #7
 8005f3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fcc <prvHeapInit+0xac>)
 8005f50:	4413      	add	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f58:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <prvHeapInit+0xb0>)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fd0 <prvHeapInit+0xb0>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4413      	add	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0307 	bic.w	r3, r3, #7
 8005f7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a15      	ldr	r2, [pc, #84]	@ (8005fd4 <prvHeapInit+0xb4>)
 8005f80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f82:	4b14      	ldr	r3, [pc, #80]	@ (8005fd4 <prvHeapInit+0xb4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2200      	movs	r2, #0
 8005f88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f8a:	4b12      	ldr	r3, [pc, #72]	@ (8005fd4 <prvHeapInit+0xb4>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd4 <prvHeapInit+0xb4>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd8 <prvHeapInit+0xb8>)
 8005fae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4a09      	ldr	r2, [pc, #36]	@ (8005fdc <prvHeapInit+0xbc>)
 8005fb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fb8:	4b09      	ldr	r3, [pc, #36]	@ (8005fe0 <prvHeapInit+0xc0>)
 8005fba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005fbe:	601a      	str	r2, [r3, #0]
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	20000938 	.word	0x20000938
 8005fd0:	20004538 	.word	0x20004538
 8005fd4:	20004540 	.word	0x20004540
 8005fd8:	20004548 	.word	0x20004548
 8005fdc:	20004544 	.word	0x20004544
 8005fe0:	20004554 	.word	0x20004554

08005fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fec:	4b28      	ldr	r3, [pc, #160]	@ (8006090 <prvInsertBlockIntoFreeList+0xac>)
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	e002      	b.n	8005ff8 <prvInsertBlockIntoFreeList+0x14>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d8f7      	bhi.n	8005ff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4413      	add	r3, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d108      	bne.n	8006026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	441a      	add	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	441a      	add	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d118      	bne.n	800606c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	4b15      	ldr	r3, [pc, #84]	@ (8006094 <prvInsertBlockIntoFreeList+0xb0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d00d      	beq.n	8006062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	441a      	add	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	e008      	b.n	8006074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006062:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <prvInsertBlockIntoFreeList+0xb0>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	e003      	b.n	8006074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	d002      	beq.n	8006082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006082:	bf00      	nop
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20004538 	.word	0x20004538
 8006094:	20004540 	.word	0x20004540

08006098 <memcmp>:
 8006098:	b510      	push	{r4, lr}
 800609a:	3901      	subs	r1, #1
 800609c:	4402      	add	r2, r0
 800609e:	4290      	cmp	r0, r2
 80060a0:	d101      	bne.n	80060a6 <memcmp+0xe>
 80060a2:	2000      	movs	r0, #0
 80060a4:	e005      	b.n	80060b2 <memcmp+0x1a>
 80060a6:	7803      	ldrb	r3, [r0, #0]
 80060a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d001      	beq.n	80060b4 <memcmp+0x1c>
 80060b0:	1b18      	subs	r0, r3, r4
 80060b2:	bd10      	pop	{r4, pc}
 80060b4:	3001      	adds	r0, #1
 80060b6:	e7f2      	b.n	800609e <memcmp+0x6>

080060b8 <memset>:
 80060b8:	4402      	add	r2, r0
 80060ba:	4603      	mov	r3, r0
 80060bc:	4293      	cmp	r3, r2
 80060be:	d100      	bne.n	80060c2 <memset+0xa>
 80060c0:	4770      	bx	lr
 80060c2:	f803 1b01 	strb.w	r1, [r3], #1
 80060c6:	e7f9      	b.n	80060bc <memset+0x4>

080060c8 <strchr>:
 80060c8:	b2c9      	uxtb	r1, r1
 80060ca:	4603      	mov	r3, r0
 80060cc:	4618      	mov	r0, r3
 80060ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d2:	b112      	cbz	r2, 80060da <strchr+0x12>
 80060d4:	428a      	cmp	r2, r1
 80060d6:	d1f9      	bne.n	80060cc <strchr+0x4>
 80060d8:	4770      	bx	lr
 80060da:	2900      	cmp	r1, #0
 80060dc:	bf18      	it	ne
 80060de:	2000      	movne	r0, #0
 80060e0:	4770      	bx	lr
	...

080060e4 <__libc_init_array>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	4d0d      	ldr	r5, [pc, #52]	@ (800611c <__libc_init_array+0x38>)
 80060e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006120 <__libc_init_array+0x3c>)
 80060ea:	1b64      	subs	r4, r4, r5
 80060ec:	10a4      	asrs	r4, r4, #2
 80060ee:	2600      	movs	r6, #0
 80060f0:	42a6      	cmp	r6, r4
 80060f2:	d109      	bne.n	8006108 <__libc_init_array+0x24>
 80060f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006124 <__libc_init_array+0x40>)
 80060f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006128 <__libc_init_array+0x44>)
 80060f8:	f000 f826 	bl	8006148 <_init>
 80060fc:	1b64      	subs	r4, r4, r5
 80060fe:	10a4      	asrs	r4, r4, #2
 8006100:	2600      	movs	r6, #0
 8006102:	42a6      	cmp	r6, r4
 8006104:	d105      	bne.n	8006112 <__libc_init_array+0x2e>
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	f855 3b04 	ldr.w	r3, [r5], #4
 800610c:	4798      	blx	r3
 800610e:	3601      	adds	r6, #1
 8006110:	e7ee      	b.n	80060f0 <__libc_init_array+0xc>
 8006112:	f855 3b04 	ldr.w	r3, [r5], #4
 8006116:	4798      	blx	r3
 8006118:	3601      	adds	r6, #1
 800611a:	e7f2      	b.n	8006102 <__libc_init_array+0x1e>
 800611c:	0800629c 	.word	0x0800629c
 8006120:	0800629c 	.word	0x0800629c
 8006124:	0800629c 	.word	0x0800629c
 8006128:	080062a0 	.word	0x080062a0

0800612c <memcpy>:
 800612c:	440a      	add	r2, r1
 800612e:	4291      	cmp	r1, r2
 8006130:	f100 33ff 	add.w	r3, r0, #4294967295
 8006134:	d100      	bne.n	8006138 <memcpy+0xc>
 8006136:	4770      	bx	lr
 8006138:	b510      	push	{r4, lr}
 800613a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006142:	4291      	cmp	r1, r2
 8006144:	d1f9      	bne.n	800613a <memcpy+0xe>
 8006146:	bd10      	pop	{r4, pc}

08006148 <_init>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	bf00      	nop
 800614c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614e:	bc08      	pop	{r3}
 8006150:	469e      	mov	lr, r3
 8006152:	4770      	bx	lr

08006154 <_fini>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	bf00      	nop
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr
